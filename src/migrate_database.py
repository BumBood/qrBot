"""
–ú–∏–≥—Ä–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤

–ó–∞–ø—É—Å–∫: python migrate_database.py
"""

import asyncio
import os
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import text
from database import engine, Base

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤—Å–µ –º–æ–¥–µ–ª–∏, —á—Ç–æ–±—ã SQLAlchemy –∑–Ω–∞–ª –æ —Ç–∞–±–ª–∏—Ü–∞—Ö
from models import User, Receipt, Prize, WeeklyLottery, Promocode
from services.promocode_service import promocode_service
from logger import logger


async def check_table_exists(session: AsyncSession, table_name: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ç–∞–±–ª–∏—Ü–∞ –≤ –ë–î"""
    try:
        result = await session.execute(
            text(
                "SELECT EXISTS (SELECT FROM information_schema.tables WHERE table_name = :table_name)"
            ),
            {"table_name": table_name},
        )
        return result.scalar()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ç–∞–±–ª–∏—Ü—ã {table_name}: {str(e)}")
        return False


async def check_column_exists(
    session: AsyncSession, table_name: str, column_name: str
) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∫–æ–ª–æ–Ω–∫–∞ –≤ —Ç–∞–±–ª–∏—Ü–µ"""
    try:
        result = await session.execute(
            text(
                """
                SELECT EXISTS (
                    SELECT FROM information_schema.columns 
                    WHERE table_name = :table_name AND column_name = :column_name
                )
            """
            ),
            {"table_name": table_name, "column_name": column_name},
        )
        return result.scalar()
    except Exception as e:
        logger.error(
            f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∫–æ–ª–æ–Ω–∫–∏ {column_name} –≤ —Ç–∞–±–ª–∏—Ü–µ {table_name}: {str(e)}"
        )
        return False


async def migrate_database():
    """
    –í—ã–ø–æ–ª–Ω—è–µ—Ç –º–∏–≥—Ä–∞—Ü–∏—é –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    """
    try:
        logger.info("–ù–∞—á–∏–Ω–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")

        async with AsyncSession(engine) as session:
            # 1. –°–æ–∑–¥–∞–µ–º –≤—Å–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã
            async with engine.begin() as conn:
                await conn.run_sync(Base.metadata.create_all)

            logger.info("‚úÖ –ü—Ä–æ–≤–µ—Ä–∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü")

            # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ç–∞–±–ª–∏—Ü–∞ promocodes
            promocodes_exists = await check_table_exists(session, "promocodes")
            if promocodes_exists:
                logger.info("‚úÖ –¢–∞–±–ª–∏—Ü–∞ promocodes —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            else:
                logger.info("üìù –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É promocodes...")
                # –¢–∞–±–ª–∏—Ü–∞ –¥–æ–ª–∂–Ω–∞ –±—ã–ª–∞ —Å–æ–∑–¥–∞—Ç—å—Å—è —á–µ—Ä–µ–∑ Base.metadata.create_all()
                promocodes_exists = await check_table_exists(session, "promocodes")
                if promocodes_exists:
                    logger.info("‚úÖ –¢–∞–±–ª–∏—Ü–∞ promocodes —Å–æ–∑–¥–∞–Ω–∞")
                else:
                    logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É promocodes")

            # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª–µ promocode_id –≤ —Ç–∞–±–ª–∏—Ü–µ prizes
            promocode_id_exists = await check_column_exists(
                session, "prizes", "promocode_id"
            )
            if promocode_id_exists:
                logger.info("‚úÖ –ü–æ–ª–µ promocode_id –≤ —Ç–∞–±–ª–∏—Ü–µ prizes —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            else:
                logger.info("üìù –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ promocode_id –≤ —Ç–∞–±–ª–∏—Ü—É prizes...")
                try:
                    await session.execute(
                        text(
                            "ALTER TABLE prizes ADD COLUMN promocode_id INTEGER REFERENCES promocodes(id)"
                        )
                    )
                    await session.commit()
                    logger.info("‚úÖ –ü–æ–ª–µ promocode_id –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ —Ç–∞–±–ª–∏—Ü—É prizes")
                except Exception as e:
                    logger.error(
                        f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—è promocode_id: {str(e)}"
                    )
                    await session.rollback()

            # 4. –ú–∏–≥—Ä–∏—Ä—É–µ–º –ø—Ä–æ–º–æ–∫–æ–¥—ã –∏–∑ —Ñ–∞–π–ª–æ–≤, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
            await migrate_promocodes_from_files(session)

            # 5. –ü–æ–ª—É—á–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            stats = await promocode_service.get_promocodes_stats(session)

            logger.info("=" * 60)
            logger.info("üéâ –ú–ò–ì–†–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê –£–°–ü–ï–®–ù–û")
            logger.info("=" * 60)
            logger.info("üìä –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
            logger.info(f"  üì¶ –í—Å–µ–≥–æ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤ –≤ –ë–î: {stats['total_count']}")
            logger.info(
                f"  üí∞ –ü—Ä–æ–º–æ–∫–æ–¥—ã 200—Ä: {stats['promo_200_total']} (–¥–æ—Å—Ç—É–ø–Ω–æ: {stats['available_200']})"
            )
            logger.info(
                f"  üíé –ü—Ä–æ–º–æ–∫–æ–¥—ã 500—Ä: {stats['promo_500_total']} (–¥–æ—Å—Ç—É–ø–Ω–æ: {stats['available_500']})"
            )
            logger.info("=" * 60)

    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –º–∏–≥—Ä–∞—Ü–∏–∏: {str(e)}")
        raise


async def migrate_promocodes_from_files(session: AsyncSession):
    """
    –ú–∏–≥—Ä–∏—Ä—É–µ—Ç –ø—Ä–æ–º–æ–∫–æ–¥—ã –∏–∑ —Ñ–∞–π–ª–æ–≤ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö (–µ—Å–ª–∏ —Ñ–∞–π–ª—ã —Å—É—â–µ—Å—Ç–≤—É—é—Ç)
    """
    try:
        promocodes_200_file = "data/promocodes/promocodes_200.txt"
        promocodes_500_file = "data/promocodes/promocodes_500.txt"

        total_migrated = 0

        # –ú–∏–≥—Ä–∞—Ü–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤ –Ω–∞ 200—Ä
        if os.path.exists(promocodes_200_file):
            logger.info(f"üìÅ –ù–∞–π–¥–µ–Ω —Ñ–∞–π–ª {promocodes_200_file}, –º–∏–≥—Ä–∏—Ä—É–µ–º...")

            with open(promocodes_200_file, "r", encoding="utf-8") as f:
                codes_200 = [line.strip() for line in f.readlines() if line.strip()]

            if codes_200:
                result = await promocode_service.add_promocodes(session, codes_200, 200)
                if result["success"]:
                    logger.info(
                        f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ {result['added_count']} –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤ –Ω–∞ 200—Ä, –ø—Ä–æ–ø—É—â–µ–Ω–æ {result['skipped_count']}"
                    )
                    total_migrated += result["added_count"]
                else:
                    logger.error(
                        f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –º–∏–≥—Ä–∞—Ü–∏–∏ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤ 200—Ä: {result['error']}"
                    )
            else:
                logger.info("‚ö†Ô∏è –§–∞–π–ª –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤ 200—Ä –ø—É—Å—Ç–æ–π")
        else:
            logger.info(f"‚ÑπÔ∏è –§–∞–π–ª {promocodes_200_file} –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")

        # –ú–∏–≥—Ä–∞—Ü–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤ –Ω–∞ 500—Ä
        if os.path.exists(promocodes_500_file):
            logger.info(f"üìÅ –ù–∞–π–¥–µ–Ω —Ñ–∞–π–ª {promocodes_500_file}, –º–∏–≥—Ä–∏—Ä—É–µ–º...")

            with open(promocodes_500_file, "r", encoding="utf-8") as f:
                codes_500 = [line.strip() for line in f.readlines() if line.strip()]

            if codes_500:
                result = await promocode_service.add_promocodes(session, codes_500, 500)
                if result["success"]:
                    logger.info(
                        f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ {result['added_count']} –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤ –Ω–∞ 500—Ä, –ø—Ä–æ–ø—É—â–µ–Ω–æ {result['skipped_count']}"
                    )
                    total_migrated += result["added_count"]
                else:
                    logger.error(
                        f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –º–∏–≥—Ä–∞—Ü–∏–∏ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤ 500—Ä: {result['error']}"
                    )
            else:
                logger.info("‚ö†Ô∏è –§–∞–π–ª –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤ 500—Ä –ø—É—Å—Ç–æ–π")
        else:
            logger.info(f"‚ÑπÔ∏è –§–∞–π–ª {promocodes_500_file} –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")

        if total_migrated > 0:
            logger.info(f"‚úÖ –í—Å–µ–≥–æ –º–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–æ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤ –∏–∑ —Ñ–∞–π–ª–æ–≤: {total_migrated}")
        else:
            logger.info(
                "‚ÑπÔ∏è –ü—Ä–æ–º–æ–∫–æ–¥—ã –∏–∑ —Ñ–∞–π–ª–æ–≤ –Ω–µ –º–∏–≥—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å (—Ñ–∞–π–ª—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∏–ª–∏ –ø—É—Å—Ç—ã–µ)"
            )

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –º–∏–≥—Ä–∞—Ü–∏–∏ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤ –∏–∑ —Ñ–∞–π–ª–æ–≤: {str(e)}")


async def create_sample_promocodes(session: AsyncSession):
    """
    –°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ –ø—Ä–æ–º–æ–∫–æ–¥—ã, –µ—Å–ª–∏ –≤ –ë–î –∏—Ö –Ω–µ—Ç
    """
    try:
        stats = await promocode_service.get_promocodes_stats(session)

        if stats["total_count"] == 0:
            logger.info("üìù –í –ë–î –Ω–µ—Ç –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤, —Å–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ...")

            # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –ø—Ä–æ–º–æ–∫–æ–¥—ã 200—Ä
            test_codes_200 = [f"TEST200-{i:03d}" for i in range(1, 11)]  # 10 –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤
            result_200 = await promocode_service.add_promocodes(
                session, test_codes_200, 200
            )

            # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –ø—Ä–æ–º–æ–∫–æ–¥—ã 500—Ä
            test_codes_500 = [f"TEST500-{i:03d}" for i in range(1, 6)]  # 5 –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤
            result_500 = await promocode_service.add_promocodes(
                session, test_codes_500, 500
            )

            if result_200["success"] and result_500["success"]:
                total_created = result_200["added_count"] + result_500["added_count"]
                logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ {total_created} —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤")
                logger.info(f"  üí∞ –ü—Ä–æ–º–æ–∫–æ–¥—ã 200—Ä: {result_200['added_count']}")
                logger.info(f"  üíé –ü—Ä–æ–º–æ–∫–æ–¥—ã 500—Ä: {result_500['added_count']}")
            else:
                logger.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤")
        else:
            logger.info(
                f"‚ÑπÔ∏è –í –ë–î —É–∂–µ –µ—Å—Ç—å {stats['total_count']} –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤, —Ç–µ—Å—Ç–æ–≤—ã–µ –Ω–µ —Å–æ–∑–¥–∞–µ–º"
            )

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤: {str(e)}")


async def main():
    """
    –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
    """
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ –º–∏–≥—Ä–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤")

    try:
        await migrate_database()

        # –°–ø—Ä–∞—à–∏–≤–∞–µ–º, —Å–æ–∑–¥–∞—Ç—å –ª–∏ —Ç–µ—Å—Ç–æ–≤—ã–µ –ø—Ä–æ–º–æ–∫–æ–¥—ã
        async with AsyncSession(engine) as session:
            await create_sample_promocodes(session)

        logger.info("üéâ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        logger.info(
            "üí° –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç—å –±–æ—Ç–∞ –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∞–¥–º–∏–Ω–∫—É –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞–º–∏"
        )

    except Exception as e:
        logger.error(f"üí• –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–æ–π: {str(e)}")
        return 1

    return 0


if __name__ == "__main__":
    exit_code = asyncio.run(main())
