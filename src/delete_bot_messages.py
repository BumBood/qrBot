#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –±–æ—Ç–∞ –≤ –¥–∏–∞–ª–æ–≥–∞—Ö —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
"""
import asyncio
import sys
import os
from typing import List, Optional
from sqlalchemy import select
from sqlalchemy.ext.asyncio import AsyncSession

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ src –¥–ª—è –∏–º–ø–æ—Ä—Ç–æ–≤
sys.path.append(os.path.join(os.path.dirname(__file__), "src"))

from aiogram import Bot
from aiogram.exceptions import (
    TelegramBadRequest,
    TelegramForbiddenError,
    TelegramNotFound,
)

from config import BOT_TOKEN
from database import engine
from models.user_model import User
from logger import logger


class MessageDeleter:
    """–ö–ª–∞—Å—Å –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –±–æ—Ç–∞"""

    def __init__(self, bot_token: str):
        self.bot = Bot(token=bot_token)
        self.deleted_count = 0
        self.error_count = 0
        self.blocked_users: List[int] = []

    async def get_all_users(self) -> List[User]:
        """–ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        async with AsyncSession(engine) as session:
            result = await session.execute(select(User))
            users = result.scalars().all()
            logger.info(f"–ù–∞–π–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –ë–î: {len(users)}")
            return list(users)

    async def delete_message_safely(self, chat_id: int, message_id: int) -> bool:
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ —É–¥–∞–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
        try:
            await self.bot.delete_message(chat_id=chat_id, message_id=message_id)
            self.deleted_count += 1
            logger.info(f"‚úÖ –£–¥–∞–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ {message_id} –≤ —á–∞—Ç–µ {chat_id}")
            return True

        except TelegramNotFound:
            # –°–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ —É–¥–∞–ª–µ–Ω–æ –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
            logger.debug(f"‚ö†Ô∏è –°–æ–æ–±—â–µ–Ω–∏–µ {message_id} –≤ —á–∞—Ç–µ {chat_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return False

        except TelegramForbiddenError:
            # –ë–æ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
            logger.warning(f"üö´ –ë–æ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {chat_id}")
            self.blocked_users.append(chat_id)
            return False

        except TelegramBadRequest as e:
            # –†–∞–∑–ª–∏—á–Ω—ã–µ –æ—à–∏–±–∫–∏ (—Å–ª–∏—à–∫–æ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –Ω–µ—Ç –ø—Ä–∞–≤ –∏ —Ç.–¥.)
            if "message to delete not found" in str(e).lower():
                logger.debug(
                    f"‚ö†Ô∏è –°–æ–æ–±—â–µ–Ω–∏–µ {message_id} –≤ —á–∞—Ç–µ {chat_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è"
                )
            elif "message can't be deleted" in str(e).lower():
                logger.warning(
                    f"‚ö†Ô∏è –°–æ–æ–±—â–µ–Ω–∏–µ {message_id} –≤ —á–∞—Ç–µ {chat_id} –Ω–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å (—Å–ª–∏—à–∫–æ–º —Å—Ç–∞—Ä–æ–µ)"
                )
            else:
                logger.error(
                    f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è {message_id} –≤ —á–∞—Ç–µ {chat_id}: {e}"
                )
            self.error_count += 1
            return False

        except Exception as e:
            logger.error(
                f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è {message_id} –≤ —á–∞—Ç–µ {chat_id}: {e}"
            )
            self.error_count += 1
            return False

    async def delete_messages_by_ids(self, chat_id: int, message_ids: List[int]) -> int:
        """–£–¥–∞–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ –∏—Ö ID"""
        deleted = 0
        for message_id in message_ids:
            if await self.delete_message_safely(chat_id, message_id):
                deleted += 1
            # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
            await asyncio.sleep(0.1)
        return deleted

    async def search_and_delete_messages_in_range(
        self,
        chat_id: int,
        search_text: str,
        start_message_id: int = 1,
        end_message_id: int = 10000,
        max_attempts: int = 100,
    ) -> int:
        """
        –ü—ã—Ç–∞–µ—Ç—Å—è –Ω–∞–π—Ç–∏ –∏ —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ ID

        –í–ù–ò–ú–ê–ù–ò–ï: –≠—Ç–æ—Ç –º–µ—Ç–æ–¥ —Ä–∞–±–æ—Ç–∞–µ—Ç –º–µ—Ç–æ–¥–æ–º –ø—Ä–æ–± –∏ –æ—à–∏–±–æ–∫, —Ç–∞–∫ –∫–∞–∫ Telegram Bot API
        –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –º–µ—Ç–æ–¥ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
        """
        deleted = 0
        attempts = 0

        logger.info(f"üîç –ü–æ–∏—Å–∫ —Å–æ–æ–±—â–µ–Ω–∏–π —Å —Ç–µ–∫—Å—Ç–æ–º '{search_text}' –≤ —á–∞—Ç–µ {chat_id}")
        logger.info(f"üìç –î–∏–∞–ø–∞–∑–æ–Ω message_id: {start_message_id}-{end_message_id}")

        # –ü—Ä–æ–±—É–µ–º —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –æ–±—Ä–∞—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ (–Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–º–µ—é—Ç –±–æ–ª—å—à–∏–π ID)
        for message_id in range(end_message_id, start_message_id - 1, -1):
            if attempts >= max_attempts:
                logger.info(
                    f"‚èπÔ∏è –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –ø–æ–ø—ã—Ç–æ–∫ ({max_attempts}) –¥–ª—è —á–∞—Ç–∞ {chat_id}"
                )
                break

            try:
                # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–æ–±—â–µ–Ω–∏–∏ —á–µ—Ä–µ–∑ forward
                # (—ç—Ç–æ –∫–æ—Å–≤–µ–Ω–Ω—ã–π —Å–ø–æ—Å–æ–± –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è)

                # –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
                success = await self.delete_message_safely(chat_id, message_id)
                if success:
                    deleted += 1
                    logger.info(f"‚úÖ –£–¥–∞–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ {message_id} –≤ —á–∞—Ç–µ {chat_id}")

                attempts += 1

                # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏
                await asyncio.sleep(0.2)

            except Exception as e:
                logger.debug(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è {message_id}: {e}")
                attempts += 1
                continue

        logger.info(
            f"üèÅ –ó–∞–≤–µ—Ä—à–µ–Ω –ø–æ–∏—Å–∫ –≤ —á–∞—Ç–µ {chat_id}. –£–¥–∞–ª–µ–Ω–æ: {deleted}, –ø–æ–ø—ã—Ç–æ–∫: {attempts}"
        )
        return deleted

    async def delete_messages_for_all_users(
        self,
        search_text: Optional[str] = None,
        message_ids: Optional[List[int]] = None,
        message_id_range: Optional[tuple] = None,
    ):
        """
        –£–¥–∞–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

        Args:
            search_text: –¢–µ–∫—Å—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å message_id_range)
            message_ids: –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ ID —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
            message_id_range: –ö–æ—Ä—Ç–µ–∂ (start_id, end_id) –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
        """
        users = await self.get_all_users()

        logger.info(f"üöÄ –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É {len(users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")

        if search_text and message_id_range:
            logger.info(
                f"üéØ –†–µ–∂–∏–º: –ü–æ–∏—Å–∫ –∏ —É–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π —Å —Ç–µ–∫—Å—Ç–æ–º '{search_text}'"
            )
            logger.info(f"üìç –î–∏–∞–ø–∞–∑–æ–Ω ID: {message_id_range[0]}-{message_id_range[1]}")
        elif message_ids:
            logger.info(f"üéØ –†–µ–∂–∏–º: –£–¥–∞–ª–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π {message_ids}")
        else:
            logger.error("‚ùå –ù–µ —É–∫–∞–∑–∞–Ω —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã!")
            return

        for i, user in enumerate(users, 1):
            logger.info(
                f"üë§ [{i}/{len(users)}] –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id} (@{user.username})"
            )

            try:
                if message_ids:
                    # –£–¥–∞–ª—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
                    await self.delete_messages_by_ids(user.id, message_ids)

                elif search_text and message_id_range:
                    # –ò—â–µ–º –∏ —É–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ
                    await self.search_and_delete_messages_in_range(
                        user.id, search_text, message_id_range[0], message_id_range[1]
                    )

                # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
                await asyncio.sleep(1)

            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}: {e}")
                continue

        # –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        logger.info("\n" + "=" * 50)
        logger.info("üìä –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
        logger.info(f"‚úÖ –£–¥–∞–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {self.deleted_count}")
        logger.info(f"‚ùå –û—à–∏–±–æ–∫: {self.error_count}")
        logger.info(f"üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª–æ –±–æ—Ç–∞: {len(self.blocked_users)}")
        if self.blocked_users:
            logger.info(f"üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: {self.blocked_users}")
        logger.info("=" * 50)

    async def close(self):
        """–ó–∞–∫—Ä—ã–≤–∞–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–æ—Ç–æ–º"""
        await self.bot.session.close()


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å–∫—Ä–∏–ø—Ç–∞"""

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–æ–∫–µ–Ω–∞
    if not BOT_TOKEN:
        logger.error(
            "‚ùå –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è BOT_TOKEN"
        )
        return

    # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä —É–¥–∞–ª–∏—Ç–µ–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π
    deleter = MessageDeleter(BOT_TOKEN)

    try:
        print("ü§ñ –°–∫—Ä–∏–ø—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –±–æ—Ç–∞")
        print("=" * 50)
        print("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã:")
        print("1. –£–¥–∞–ª–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ ID")
        print("2. –ù–∞–π—Ç–∏ –∏ —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ ID")
        print("3. –ë—ã—Å—Ç—Ä–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ - —É–∫–∞–∑–∞—Ç—å —Ç–µ–∫—Å—Ç –∏ –ø—Ä–∏–º–µ—Ä–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω")

        choice = input("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ä–µ–∂–∏–º–∞ (1-3): ").strip()

        if choice == "1":
            # –†–µ–∂–∏–º —É–¥–∞–ª–µ–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
            message_ids_str = input("–í–≤–µ–¥–∏—Ç–µ ID —Å–æ–æ–±—â–µ–Ω–∏–π —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é: ").strip()
            message_ids = [
                int(x.strip())
                for x in message_ids_str.split(",")
                if x.strip().isdigit()
            ]

            if not message_ids:
                logger.error("‚ùå –ù–µ —É–∫–∞–∑–∞–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ ID —Å–æ–æ–±—â–µ–Ω–∏–π")
                return

            confirm = (
                input(
                    f"‚ö†Ô∏è –£–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è {message_ids} —É –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π? (–¥–∞/–Ω–µ—Ç): "
                )
                .strip()
                .lower()
            )
            if confirm not in ["–¥–∞", "yes", "y"]:
                logger.info("‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
                return

            await deleter.delete_messages_for_all_users(message_ids=message_ids)

        elif choice == "2":
            # –†–µ–∂–∏–º –ø–æ–∏—Å–∫–∞ –∏ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ —Ç–µ–∫—Å—Ç—É
            search_text = input(
                "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, '–ü–æ–±–µ–¥–∏—Ç–µ–ª—å: —á–µ–∫ ‚Ññ 27'): "
            ).strip()
            if not search_text:
                logger.error("‚ùå –ù–µ —É–∫–∞–∑–∞–Ω —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞")
                return

            start_id = input("–í–≤–µ–¥–∏—Ç–µ –Ω–∞—á–∞–ª—å–Ω—ã–π message_id (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 1): ").strip()
            start_id = int(start_id) if start_id.isdigit() else 1

            end_id = input("–í–≤–µ–¥–∏—Ç–µ –∫–æ–Ω–µ—á–Ω—ã–π message_id (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 1000): ").strip()
            end_id = int(end_id) if end_id.isdigit() else 1000

            confirm = (
                input(
                    f"‚ö†Ô∏è –ò—Å–∫–∞—Ç—å –∏ —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ç–µ–∫—Å—Ç–æ–º '{search_text}' –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ {start_id}-{end_id}? (–¥–∞/–Ω–µ—Ç): "
                )
                .strip()
                .lower()
            )
            if confirm not in ["–¥–∞", "yes", "y"]:
                logger.info("‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
                return

            await deleter.delete_messages_for_all_users(
                search_text=search_text, message_id_range=(start_id, end_id)
            )

        elif choice == "3":
            # –ë—ã—Å—Ç—Ä—ã–π —Ä–µ–∂–∏–º –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π –æ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è—Ö
            search_text = input(
                "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é '–ü–æ–±–µ–¥–∏—Ç–µ–ª—å: —á–µ–∫ ‚Ññ'): "
            ).strip()
            if not search_text:
                search_text = "–ü–æ–±–µ–¥–∏—Ç–µ–ª—å: —á–µ–∫ ‚Ññ"

            print(f"üéØ –ë—É–¥–µ–º –∏—Å–∫–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ç–µ–∫—Å—Ç–æ–º: '{search_text}'")
            print(
                "üìç –î–∏–∞–ø–∞–∑–æ–Ω –ø–æ–∏—Å–∫–∞: –ø–æ—Å–ª–µ–¥–Ω–∏–µ 500 —Å–æ–æ–±—â–µ–Ω–∏–π (ID –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ-500 –¥–æ —Ç–µ–∫—É—â–µ–≥–æ)"
            )

            confirm = input("‚ö†Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å? (–¥–∞/–Ω–µ—Ç): ").strip().lower()
            if confirm not in ["–¥–∞", "yes", "y"]:
                logger.info("‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
                return

            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∏–º–µ—Ä–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω –¥–ª—è –ø–æ–∏—Å–∫–∞ –Ω–µ–¥–∞–≤–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
            # –í —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∏–∞–ø–∞–∑–æ–Ω
            await deleter.delete_messages_for_all_users(
                search_text=search_text, message_id_range=(1, 500)  # –ü—Ä–∏–º–µ—Ä–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω
            )

        else:
            logger.error("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä —Ä–µ–∂–∏–º–∞")
            return

    except KeyboardInterrupt:
        logger.info("‚èπÔ∏è –°–∫—Ä–∏–ø—Ç –ø—Ä–µ—Ä–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
    finally:
        await deleter.close()


if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç
    asyncio.run(main())
