from aiogram import Router, F
from aiogram.types import CallbackQuery, Message
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.utils.keyboard import InlineKeyboardBuilder
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import select, and_
from models.weekly_lottery_model import WeeklyLottery

from services.weekly_lottery_service import weekly_lottery_service
from services.scheduler_service import lottery_scheduler
from handlers.base_handler import get_main_menu_keyboard
from logger import logger

from aiogram.types import CallbackQuery

# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä –¥–ª—è –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ —Ä–æ–∑—ã–≥—Ä—ã—à–∞
router = Router()


@router.callback_query(F.data == "weekly_lottery")
async def callback_weekly_lottery(callback: CallbackQuery, session: AsyncSession):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π —Ä–æ–∑—ã–≥—Ä—ã—à OZON"
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π
        lottery_history = await weekly_lottery_service.get_lottery_history(
            session, limit=5
        )

        # –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ä–æ–∑—ã–≥—Ä—ã—à–∞
        next_lottery_time = lottery_scheduler.get_next_lottery_time()

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        text = (
            "<b>üéÅ –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π —Ä–æ–∑—ã–≥—Ä—ã—à —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤ OZON –Ω–∞ 5000 —Ä—É–±.</b>\n\n"
            "–ö–∞–∂–¥—É—é –Ω–µ–¥–µ–ª—é –º—ã —Ä–∞–∑—ã–≥—Ä—ã–≤–∞–µ–º —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç OZON –Ω–∞ 5000 —Ä—É–±. —Å—Ä–µ–¥–∏ –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤, "
            "–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–≤—à–∏—Ö —á–µ–∫–∏ —Å –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫–∞ –ø–æ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ.\n\n"
            "<b>–£—Å–ª–æ–≤–∏—è —É—á–∞—Å—Ç–∏—è:</b>\n"
            "‚Ä¢ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ —á–µ–∫ —Å —Ç–æ–≤–∞—Ä–∞–º–∏ ¬´–ê–π—Å–∏–¥–∞¬ª\n"
            "‚Ä¢ –ß–µ–∫ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω\n"
            "‚Ä¢ –†–æ–∑—ã–≥—Ä—ã—à –ø—Ä–æ–≤–æ–¥–∏—Ç—Å—è –∫–∞–∂–¥—ã–π –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫\n\n"
        )

        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–ª–µ–¥—É—é—â–µ–º —Ä–æ–∑—ã–≥—Ä—ã—à–µ
        if next_lottery_time:
            text += f"üìÖ <b>–°–ª–µ–¥—É—é—â–∏–π —Ä–æ–∑—ã–≥—Ä—ã—à:</b> {next_lottery_time.strftime('%d.%m.%Y –≤ %H:%M')}\n\n"

        # –î–æ–±–∞–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π
        if lottery_history:
            text += "<b>üèÜ –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ä–æ–∑—ã–≥—Ä—ã—à–∏:</b>\n"
            for i, lottery in enumerate(lottery_history, 1):
                if lottery.winner_user_id:
                    winner_text = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å #{lottery.winner_user_id}"
                    text += (
                        f"{i}. {lottery.week_start.strftime('%d.%m')} - {lottery.week_end.strftime('%d.%m.%Y')}: "
                        f"{winner_text} (—á–µ–∫ ‚Ññ{lottery.winner_receipt_id})\n"
                    )
                else:
                    text += (
                        f"{i}. {lottery.week_start.strftime('%d.%m')} - {lottery.week_end.strftime('%d.%m.%Y')}: "
                        f"–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –Ω–µ –±—ã–ª–æ\n"
                    )
        else:
            text += "–†–æ–∑—ã–≥—Ä—ã—à–∏ –µ—â—ë –Ω–µ –ø—Ä–æ–≤–æ–¥–∏–ª–∏—Å—å.\n"

        text += "\n–£–¥–∞—á–∏ –≤ —Å–ª–µ–¥—É—é—â–µ–º —Ä–æ–∑—ã–≥—Ä—ã—à–µ! üçÄ"

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        builder = InlineKeyboardBuilder()
        builder.button(text="üîç –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å —á–µ–∫", callback_data="register_receipt")
        builder.button(text="üìù –ú–æ–∏ —á–µ–∫–∏", callback_data="my_receipts")
        builder.button(text="–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="main_menu")
        builder.adjust(1)

        await callback.message.edit_text(
            text, reply_markup=builder.as_markup(), parse_mode="HTML"
        )
        await callback.answer()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ —Ä–æ–∑—ã–≥—Ä—ã—à–∞: {str(e)}")
        await callback.message.edit_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ä–æ–∑—ã–≥—Ä—ã—à–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_main_menu_keyboard(),
        )
        await callback.answer()


@router.callback_query(F.data == "lottery_history")
async def callback_lottery_history(callback: CallbackQuery, session: AsyncSession):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–¥—Ä–æ–±–Ω—É—é –∏—Å—Ç–æ—Ä–∏—é –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã—Ö —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π
    """
    try:
        lottery_history = await weekly_lottery_service.get_lottery_history(
            session, limit=10
        )

        if not lottery_history:
            text = "–ò—Å—Ç–æ—Ä–∏—è —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π –ø—É—Å—Ç–∞."
        else:
            text = "<b>üìú –ò—Å—Ç–æ—Ä–∏—è –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã—Ö —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π:</b>\n\n"

            for i, lottery in enumerate(lottery_history, 1):
                conducted_date = (
                    lottery.conducted_at.strftime("%d.%m.%Y –≤ %H:%M")
                    if lottery.conducted_at
                    else "–ù–µ –ø—Ä–æ–≤–µ–¥—ë–Ω"
                )

                text += f"<b>{i}. –ù–µ–¥–µ–ª—è {lottery.week_start.strftime('%d.%m')} - {lottery.week_end.strftime('%d.%m.%Y')}</b>\n"
                text += f"–ü—Ä–æ–≤–µ–¥—ë–Ω: {conducted_date}\n"

                if lottery.winner_user_id:
                    text += f"üèÜ –ü–æ–±–µ–¥–∏—Ç–µ–ª—å: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å #{lottery.winner_user_id}\n"
                    text += f"üßæ –í—ã–∏–≥—Ä—ã—à–Ω—ã–π —á–µ–∫: ‚Ññ{lottery.winner_receipt_id}\n"
                    text += f"üí∞ –ü—Ä–∏–∑: {lottery.prize_amount} —Ä—É–±.\n"

                    notification_status = (
                        "‚úÖ –î–∞" if lottery.notification_sent else "‚ùå –ù–µ—Ç"
                    )
                    text += f"üì± –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {notification_status}\n"
                else:
                    text += "üë• –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –Ω–µ –±—ã–ª–æ\n"

                text += "\n"

        builder = InlineKeyboardBuilder()
        builder.button(text="üéÅ –ö —Ä–æ–∑—ã–≥—Ä—ã—à—É", callback_data="weekly_lottery")
        builder.button(text="–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="main_menu")
        builder.adjust(1)

        await callback.message.edit_text(
            text, reply_markup=builder.as_markup(), parse_mode="HTML"
        )
        await callback.answer()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –∏—Å—Ç–æ—Ä–∏–∏ —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π: {str(e)}")
        await callback.message.edit_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏—Å—Ç–æ—Ä–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_main_menu_keyboard(),
        )
        await callback.answer()
class ContactLotteryState(StatesGroup):
    waiting_for_contact = State()

@router.callback_query(lambda c: c.data and c.data.startswith("send_contact"))
async def callback_send_contact(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–Ω—Ç–∞–∫—Ç–∞"""
    await callback.answer()
    # –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –Ω–µ –Ω–∞–∂–∏–º–∞–ª–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ
    try:
        await callback.message.edit_reply_markup(None)
    except Exception:
        pass
    # –ü—Ä–æ—Å–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏—Å–ª–∞—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç —Ç–µ–∫—Å—Ç–æ–º
    await callback.message.answer(
        "üì≤ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤–∞—à–µ–≥–æ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —É–¥–æ–±–Ω—ã–º –¥–ª—è –≤–∞—Å —Å–ø–æ—Å–æ–±–æ–º (—Ç–µ–∫—Å—Ç–æ–º)."
    )
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–∞
    await state.set_state(ContactLotteryState.waiting_for_contact)





@router.message(ContactLotteryState.waiting_for_contact)
async def handle_winner_contact(
    message: Message, session: AsyncSession, state: FSMContext
):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –æ—Ç –ø–æ–±–µ–¥–∏—Ç–µ–ª—è –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ —Ä–æ–∑—ã–≥—Ä—ã—à–∞
    """
    # –ò—â–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –ª–æ—Ç–µ—Ä–µ—é –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±–µ–∑ –∫–æ–Ω—Ç–∞–∫—Ç–∞
    result = await session.execute(
        select(WeeklyLottery)
        .where(
            and_(
                WeeklyLottery.winner_user_id == message.from_user.id,
                WeeklyLottery.contact_sent == False,
            )
        )
        .order_by(WeeklyLottery.conducted_at.desc())
        .limit(1)
    )
    lottery = result.scalars().first()
    if lottery:
        lottery.contact_info = message.text
        lottery.contact_sent = True
        await session.commit()
        await message.answer(
            "–°–ø–∞—Å–∏–±–æ! –í–∞—à –∫–æ–Ω—Ç–∞–∫—Ç –ø–æ–ª—É—á–µ–Ω. –û–∂–∏–¥–∞–π—Ç–µ, –º–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏."
        )
        # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.clear()


def register_weekly_lottery_handlers() -> Router:
    """
    –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ —Ä–æ–∑—ã–≥—Ä—ã—à–∞
    """
    return router
