import random
from datetime import datetime, timedelta
from typing import Optional, Dict, Any
from sqlalchemy import select, and_
from sqlalchemy.ext.asyncio import AsyncSession

from models.weekly_lottery_model import WeeklyLottery
from models.receipt_model import Receipt
from models.user_model import User
from logger import logger


class WeeklyLotteryService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ —Ä–æ–∑—ã–≥—Ä—ã—à–∞ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤ OZON –Ω–∞ 5000 —Ä—É–±"""

    @staticmethod
    def get_previous_week_dates() -> tuple[datetime, datetime]:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∞—Ç—ã –Ω–∞—á–∞–ª–∞ –∏ –∫–æ–Ω—Ü–∞ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –Ω–µ–¥–µ–ª–∏

        Returns:
            tuple: (–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ 00:00, –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ 23:59) –ø—Ä–µ–¥—ã–¥—É—â–µ–π –Ω–µ–¥–µ–ª–∏
        """
        today = datetime.now()
        # –ù–∞—Ö–æ–¥–∏–º –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ —Ç–µ–∫—É—â–µ–π –Ω–µ–¥–µ–ª–∏
        current_monday = today - timedelta(days=today.weekday())
        current_monday = current_monday.replace(
            hour=0, minute=0, second=0, microsecond=0
        )

        # –ü—Ä–µ–¥—ã–¥—É—â–∏–π –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ (–Ω–∞—á–∞–ª–æ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –Ω–µ–¥–µ–ª–∏)
        prev_monday = current_monday - timedelta(days=7)

        # –ü—Ä–µ–¥—ã–¥—É—â–µ–µ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ (–∫–æ–Ω–µ—Ü –ø—Ä–µ–¥—ã–¥—É—â–µ–π –Ω–µ–¥–µ–ª–∏)
        prev_sunday = prev_monday + timedelta(days=6, hours=23, minutes=59, seconds=59)

        return prev_monday, prev_sunday

    @staticmethod
    async def get_eligible_receipts(
        session: AsyncSession, week_start: datetime, week_end: datetime
    ) -> list[Receipt]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω–Ω—ã–µ —á–µ–∫–∏ –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—É—é –Ω–µ–¥–µ–ª—é

        Args:
            session: –°–µ—Å—Å–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            week_start: –ù–∞—á–∞–ª–æ –Ω–µ–¥–µ–ª–∏
            week_end: –ö–æ–Ω–µ—Ü –Ω–µ–¥–µ–ª–∏

        Returns:
            list[Receipt]: –°–ø–∏—Å–æ–∫ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —á–µ–∫–æ–≤
        """
        try:
            query = await session.execute(
                select(Receipt).where(
                    and_(
                        Receipt.status == "verified",
                        Receipt.created_at >= week_start,
                        Receipt.created_at <= week_end,
                        Receipt.pharmacy.ilike("%–ø–ª–∞–Ω–µ—Ç–∞%"),
                        Receipt.items_count > 0,
                    )
                )
            )
            receipts = query.scalars().all()

            logger.info(
                f"–ù–∞–π–¥–µ–Ω–æ {len(receipts)} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω–Ω—ã—Ö —á–µ–∫–æ–≤ "
                f"—Å {week_start.strftime('%d.%m.%Y')} –ø–æ {week_end.strftime('%d.%m.%Y')}"
            )

            return receipts

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —á–µ–∫–æ–≤: {str(e)}")
            return []

    @staticmethod
    async def conduct_lottery(session: AsyncSession, bot=None) -> Dict[str, Any]:
        """
        –ü—Ä–æ–≤–æ–¥–∏—Ç –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π —Ä–æ–∑—ã–≥—Ä—ã—à

        Args:
            session: –°–µ—Å—Å–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            bot: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π

        Returns:
            Dict[str, Any]: –†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–æ–∑—ã–≥—Ä—ã—à–∞
        """
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—ã –ø—Ä–µ–¥—ã–¥—É—â–µ–π –Ω–µ–¥–µ–ª–∏
            week_start, week_end = WeeklyLotteryService.get_previous_week_dates()

            logger.info(
                f"–ü—Ä–æ–≤–æ–¥–∏–º —Ä–æ–∑—ã–≥—Ä—ã—à –∑–∞ –Ω–µ–¥–µ–ª—é {week_start.strftime('%d.%m.%Y')} - {week_end.strftime('%d.%m.%Y')}"
            )

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—Ä–æ–≤–æ–¥–∏–ª—Å—è –ª–∏ —É–∂–µ —Ä–æ–∑—ã–≥—Ä—ã—à –∑–∞ —ç—Ç—É –Ω–µ–¥–µ–ª—é
            existing_lottery = await session.execute(
                select(WeeklyLottery).where(
                    and_(
                        WeeklyLottery.week_start == week_start,
                        WeeklyLottery.week_end == week_end,
                    )
                )
            )

            if existing_lottery.scalars().first():
                logger.warning(
                    f"–†–æ–∑—ã–≥—Ä—ã—à –∑–∞ –Ω–µ–¥–µ–ª—é {week_start.strftime('%d.%m.%Y')} - {week_end.strftime('%d.%m.%Y')} —É–∂–µ –ø—Ä–æ–≤–æ–¥–∏–ª—Å—è"
                )
                return {
                    "success": False,
                    "error": "–†–æ–∑—ã–≥—Ä—ã—à –∑–∞ —ç—Ç—É –Ω–µ–¥–µ–ª—é —É–∂–µ –ø—Ä–æ–≤–æ–¥–∏–ª—Å—è",
                }

            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥—Ö–æ–¥—è—â–∏–µ —á–µ–∫–∏
            eligible_receipts = await WeeklyLotteryService.get_eligible_receipts(
                session, week_start, week_end
            )

            if not eligible_receipts:
                logger.info("–ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —á–µ–∫–æ–≤ –¥–ª—è —Ä–æ–∑—ã–≥—Ä—ã—à–∞")

                # –°–æ–∑–¥–∞—ë–º –∑–∞–ø–∏—Å—å –æ —Ä–æ–∑—ã–≥—Ä—ã—à–µ –±–µ–∑ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
                lottery_record = WeeklyLottery(
                    week_start=week_start,
                    week_end=week_end,
                    conducted_at=datetime.now(),
                )

                session.add(lottery_record)
                await session.commit()

                return {
                    "success": True,
                    "winner": None,
                    "participants_count": 0,
                    "message": "–ù–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è —Ä–æ–∑—ã–≥—Ä—ã—à–∞",
                }

            # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π —á–µ–∫
            winner_receipt = random.choice(eligible_receipts)

            # –°–æ–∑–¥–∞—ë–º –∑–∞–ø–∏—Å—å –æ —Ä–æ–∑—ã–≥—Ä—ã—à–µ
            lottery_record = WeeklyLottery(
                week_start=week_start,
                week_end=week_end,
                winner_user_id=winner_receipt.user_id,
                winner_receipt_id=winner_receipt.id,
                conducted_at=datetime.now(),
            )

            session.add(lottery_record)
            await session.commit()
            await session.refresh(lottery_record)

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–±–µ–¥–∏—Ç–µ–ª—é
            notification_sent = False
            if bot:
                notification_sent = await WeeklyLotteryService.notify_winner(
                    session, bot, lottery_record
                )

                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                lottery_record.notification_sent = notification_sent
                await session.commit()

            logger.info(
                f"–†–æ–∑—ã–≥—Ä—ã—à –ø—Ä–æ–≤–µ–¥—ë–Ω! –ü–æ–±–µ–¥–∏—Ç–µ–ª—å: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {winner_receipt.user_id}, "
                f"—á–µ–∫ {winner_receipt.id}, —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {notification_sent}"
            )

            return {
                "success": True,
                "winner": {
                    "user_id": winner_receipt.user_id,
                    "receipt_id": winner_receipt.id,
                    "lottery_id": lottery_record.id,
                },
                "participants_count": len(eligible_receipts),
                "notification_sent": notification_sent,
            }

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏–∏ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ —Ä–æ–∑—ã–≥—Ä—ã—à–∞: {str(e)}")
            try:
                await session.rollback()
            except Exception:
                pass

            return {
                "success": False,
                "error": f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏–∏ —Ä–æ–∑—ã–≥—Ä—ã—à–∞: {str(e)}",
            }

    @staticmethod
    async def notify_winner(
        session: AsyncSession, bot, lottery_record: WeeklyLottery
    ) -> bool:
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–±–µ–¥–∏—Ç–µ–ª—é –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ —Ä–æ–∑—ã–≥—Ä—ã—à–∞

        Args:
            session: –°–µ—Å—Å–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            bot: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
            lottery_record: –ó–∞–ø–∏—Å—å –æ —Ä–æ–∑—ã–≥—Ä—ã—à–µ

        Returns:
            bool: True –µ—Å–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ
        """
        try:
            if not lottery_record.winner_user_id:
                return False

            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
            user_query = await session.execute(
                select(User).where(User.id == lottery_record.winner_user_id)
            )
            user = user_query.scalars().first()

            if not user:
                logger.error(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {lottery_record.winner_user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return False

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            message = (
                f"üéâ –ü–û–ó–î–†–ê–í–õ–Ø–ï–ú!\n\n"
                f"–í—ã —Å—Ç–∞–ª–∏ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–º –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ —Ä–æ–∑—ã–≥—Ä—ã—à–∞ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ OZON –Ω–∞ {lottery_record.prize_amount} —Ä—É–±.!\n\n"
                f"üìÖ –†–æ–∑—ã–≥—Ä—ã—à –ø—Ä–æ–≤–µ–¥—ë–Ω: {lottery_record.conducted_at.strftime('%d.%m.%Y –≤ %H:%M')}\n"
                f"üßæ –í–∞—à –≤—ã–∏–≥—Ä—ã—à–Ω—ã–π —á–µ–∫: ‚Ññ{lottery_record.winner_receipt_id}\n\n"
                f"–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–∏–∑–∞ —Å –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è –Ω–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä.\n"
                f"üìû –ö–æ–Ω—Ç–∞–∫—Ç –¥–ª—è —Å–≤—è–∑–∏: {lottery_record.contact_info}\n\n"
                f"–°–ø–∞—Å–∏–±–æ –∑–∞ —É—á–∞—Å—Ç–∏–µ –≤ –∞–∫—Ü–∏–∏!"
            )

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            await bot.send_message(lottery_record.winner_user_id, message)

            logger.info(
                f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–æ–±–µ–¥–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {lottery_record.winner_user_id}"
            )
            return True

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–±–µ–¥–∏—Ç–µ–ª—é: {str(e)}")
            return False

    @staticmethod
    async def get_lottery_history(
        session: AsyncSession, limit: int = 10
    ) -> list[WeeklyLottery]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã—Ö —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π

        Args:
            session: –°–µ—Å—Å–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            limit: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π

        Returns:
            list[WeeklyLottery]: –°–ø–∏—Å–æ–∫ —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π
        """
        try:
            query = await session.execute(
                select(WeeklyLottery)
                .order_by(WeeklyLottery.created_at.desc())
                .limit(limit)
            )

            return query.scalars().all()

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏ —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π: {str(e)}")
            return []


# –≠–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
weekly_lottery_service = WeeklyLotteryService()
