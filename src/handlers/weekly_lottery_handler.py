from aiogram import Router, F
from aiogram.types import CallbackQuery, Message
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.utils.keyboard import InlineKeyboardBuilder
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import select, and_
from models.weekly_lottery_model import WeeklyLottery

from services.weekly_lottery_service import weekly_lottery_service
from services.scheduler_service import lottery_scheduler
from handlers.base_handler import get_main_menu_keyboard
from logger import logger
from config import ADMIN_IDS

from aiogram.types import CallbackQuery

# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä –¥–ª—è –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ —Ä–æ–∑—ã–≥—Ä—ã—à–∞
router = Router()


@router.callback_query(F.data == "weekly_lottery")
async def callback_weekly_lottery(callback: CallbackQuery, session: AsyncSession):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π —Ä–æ–∑—ã–≥—Ä—ã—à OZON"
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π
        lottery_history = await weekly_lottery_service.get_lottery_history(
            session, limit=5
        )

        # –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ä–æ–∑—ã–≥—Ä—ã—à–∞
        next_lottery_time = lottery_scheduler.get_next_lottery_time()

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        text = (
            "<b>üéÅ –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π —Ä–æ–∑—ã–≥—Ä—ã—à —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤ OZON –Ω–∞ 5000 —Ä—É–±.</b>\n\n"
            "–ö–∞–∂–¥—É—é –Ω–µ–¥–µ–ª—é –º—ã —Ä–∞–∑—ã–≥—Ä—ã–≤–∞–µ–º —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç OZON –Ω–∞ 5000 —Ä—É–±. —Å—Ä–µ–¥–∏ –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤, "
            "–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–≤—à–∏—Ö —á–µ–∫–∏ —Å –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫–∞ –ø–æ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ.\n\n"
            "<b>–£—Å–ª–æ–≤–∏—è —É—á–∞—Å—Ç–∏—è:</b>\n"
            "‚Ä¢ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ —á–µ–∫ —Å —Ç–æ–≤–∞—Ä–∞–º–∏ ¬´–ê–π—Å–∏–¥–∞¬ª\n"
            "‚Ä¢ –ß–µ–∫ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω\n"
            "‚Ä¢ –†–æ–∑—ã–≥—Ä—ã—à –ø—Ä–æ–≤–æ–¥–∏—Ç—Å—è –∫–∞–∂–¥—ã–π –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫\n\n"
        )

        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–ª–µ–¥—É—é—â–µ–º —Ä–æ–∑—ã–≥—Ä—ã—à–µ
        if next_lottery_time:
            text += f"üìÖ <b>–°–ª–µ–¥—É—é—â–∏–π —Ä–æ–∑—ã–≥—Ä—ã—à:</b> {next_lottery_time.strftime('%d.%m.%Y –≤ %H:%M')}\n\n"

        # –î–æ–±–∞–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π
        if lottery_history:
            text += "<b>üèÜ –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ä–æ–∑—ã–≥—Ä—ã—à–∏:</b>\n"
            for i, lottery in enumerate(lottery_history, 1):
                if lottery.winner_user_id:
                    winner_text = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å #{lottery.winner_user_id}"
                    text += (
                        f"{i}. {lottery.week_start.strftime('%d.%m')} - {lottery.week_end.strftime('%d.%m.%Y')}: "
                        f"{winner_text} (—á–µ–∫ ‚Ññ{lottery.winner_receipt_id})\n"
                    )
                else:
                    text += (
                        f"{i}. {lottery.week_start.strftime('%d.%m')} - {lottery.week_end.strftime('%d.%m.%Y')}: "
                        f"–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –Ω–µ –±—ã–ª–æ\n"
                    )
        else:
            text += "–†–æ–∑—ã–≥—Ä—ã—à–∏ –µ—â—ë –Ω–µ –ø—Ä–æ–≤–æ–¥–∏–ª–∏—Å—å.\n"

        text += "\n–£–¥–∞—á–∏ –≤ —Å–ª–µ–¥—É—é—â–µ–º —Ä–æ–∑—ã–≥—Ä—ã—à–µ! üçÄ"

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        builder = InlineKeyboardBuilder()
        builder.button(text="üîç –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å —á–µ–∫", callback_data="register_receipt")
        builder.button(text="üìù –ú–æ–∏ —á–µ–∫–∏", callback_data="my_receipts")

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–æ–∑—ã–≥—Ä—ã—à–∞–º–∏ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
        if str(callback.from_user.id) in ADMIN_IDS:
            builder.button(
                text="‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–æ–∑—ã–≥—Ä—ã—à–∞–º–∏",
                callback_data="admin_lottery_management",
            )

        builder.button(text="–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="main_menu")
        builder.adjust(1)

        await callback.message.edit_text(
            text, reply_markup=builder.as_markup(), parse_mode="HTML"
        )
        await callback.answer()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ —Ä–æ–∑—ã–≥—Ä—ã—à–∞: {str(e)}")
        await callback.message.edit_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ä–æ–∑—ã–≥—Ä—ã—à–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_main_menu_keyboard(),
        )
        await callback.answer()


@router.callback_query(F.data == "lottery_history")
async def callback_lottery_history(callback: CallbackQuery, session: AsyncSession):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–¥—Ä–æ–±–Ω—É—é –∏—Å—Ç–æ—Ä–∏—é –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã—Ö —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π
    """
    try:
        lottery_history = await weekly_lottery_service.get_lottery_history(
            session, limit=10
        )

        if not lottery_history:
            text = "–ò—Å—Ç–æ—Ä–∏—è —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π –ø—É—Å—Ç–∞."
        else:
            text = "<b>üìú –ò—Å—Ç–æ—Ä–∏—è –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã—Ö —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π:</b>\n\n"

            for i, lottery in enumerate(lottery_history, 1):
                conducted_date = (
                    lottery.conducted_at.strftime("%d.%m.%Y –≤ %H:%M")
                    if lottery.conducted_at
                    else "–ù–µ –ø—Ä–æ–≤–µ–¥—ë–Ω"
                )

                text += f"<b>{i}. –ù–µ–¥–µ–ª—è {lottery.week_start.strftime('%d.%m')} - {lottery.week_end.strftime('%d.%m.%Y')}</b>\n"
                text += f"–ü—Ä–æ–≤–µ–¥—ë–Ω: {conducted_date}\n"

                if lottery.winner_user_id:
                    text += f"üèÜ –ü–æ–±–µ–¥–∏—Ç–µ–ª—å: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å #{lottery.winner_user_id}\n"
                    text += f"üßæ –í—ã–∏–≥—Ä—ã—à–Ω—ã–π —á–µ–∫: ‚Ññ{lottery.winner_receipt_id}\n"
                    text += f"üí∞ –ü—Ä–∏–∑: {lottery.prize_amount} —Ä—É–±.\n"

                    notification_status = (
                        "‚úÖ –î–∞" if lottery.notification_sent else "‚ùå –ù–µ—Ç"
                    )
                    text += f"üì± –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {notification_status}\n"
                else:
                    text += "üë• –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –Ω–µ –±—ã–ª–æ\n"

                text += "\n"

        builder = InlineKeyboardBuilder()
        builder.button(text="üéÅ –ö —Ä–æ–∑—ã–≥—Ä—ã—à—É", callback_data="weekly_lottery")
        builder.button(text="–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="main_menu")
        builder.adjust(1)

        await callback.message.edit_text(
            text, reply_markup=builder.as_markup(), parse_mode="HTML"
        )
        await callback.answer()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –∏—Å—Ç–æ—Ä–∏–∏ —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π: {str(e)}")
        await callback.message.edit_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏—Å—Ç–æ—Ä–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_main_menu_keyboard(),
        )
        await callback.answer()


class ContactLotteryState(StatesGroup):
    waiting_for_contact = State()


<<<<<<< HEAD
=======
class ManualSelectState(StatesGroup):
    waiting_for_receipt_id = State()


>>>>>>> ccc01473e1b548e584dbb1e6792623970819e2a9
@router.callback_query(lambda c: c.data and c.data.startswith("send_contact"))
async def callback_send_contact(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–Ω—Ç–∞–∫—Ç–∞"""
    await callback.answer()
    # –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –Ω–µ –Ω–∞–∂–∏–º–∞–ª–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ
    try:
        await callback.message.edit_reply_markup(None)
    except Exception:
        pass
    # –ü—Ä–æ—Å–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏—Å–ª–∞—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç —Ç–µ–∫—Å—Ç–æ–º
    await callback.message.answer(
        "üì≤ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤–∞—à–µ–≥–æ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —É–¥–æ–±–Ω—ã–º –¥–ª—è –≤–∞—Å —Å–ø–æ—Å–æ–±–æ–º (—Ç–µ–∫—Å—Ç–æ–º)."
    )
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–∞
    await state.set_state(ContactLotteryState.waiting_for_contact)


@router.message(ContactLotteryState.waiting_for_contact)
async def handle_winner_contact(
    message: Message, session: AsyncSession, state: FSMContext
):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –æ—Ç –ø–æ–±–µ–¥–∏—Ç–µ–ª—è –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ —Ä–æ–∑—ã–≥—Ä—ã—à–∞
    """
    # –ò—â–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –ª–æ—Ç–µ—Ä–µ—é –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±–µ–∑ –∫–æ–Ω—Ç–∞–∫—Ç–∞
    result = await session.execute(
        select(WeeklyLottery)
        .where(
            and_(
                WeeklyLottery.winner_user_id == message.from_user.id,
                WeeklyLottery.contact_sent == False,
            )
        )
        .order_by(WeeklyLottery.conducted_at.desc())
        .limit(1)
    )
    lottery = result.scalars().first()
    if lottery:
        lottery.contact_info = message.text
        lottery.contact_sent = True
        await session.commit()
        await message.answer(
            "–°–ø–∞—Å–∏–±–æ! –í–∞—à –∫–æ–Ω—Ç–∞–∫—Ç –ø–æ–ª—É—á–µ–Ω. –û–∂–∏–¥–∞–π—Ç–µ, –º–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏."
        )
        # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.clear()


@router.callback_query(F.data == "admin_lottery_management")
async def callback_admin_lottery_management(
    callback: CallbackQuery, session: AsyncSession
):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–æ–∑—ã–≥—Ä—ã—à–∞–º–∏ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
    """
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä
    if str(callback.from_user.id) not in ADMIN_IDS:
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è")
        return

    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ä–æ–∑—ã–≥—Ä—ã—à–∏
        recent_lotteries = await weekly_lottery_service.get_lottery_history(
            session, limit=5
        )

        text = "<b>‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–æ–∑—ã–≥—Ä—ã—à–∞–º–∏</b>\n\n"

        if recent_lotteries:
            text += "<b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ä–æ–∑—ã–≥—Ä—ã—à–∏:</b>\n"
            for i, lottery in enumerate(recent_lotteries, 1):
                status_icon = "‚úÖ" if lottery.notification_sent else "‚è≥"
                winner_info = (
                    f"#{lottery.winner_user_id} (—á–µ–∫ #{lottery.winner_receipt_id})"
                    if lottery.winner_user_id
                    else "–ù–µ—Ç –ø–æ–±–µ–¥–∏—Ç–µ–ª—è"
                )
                text += f"{i}. {lottery.week_start.strftime('%d.%m')} - {lottery.week_end.strftime('%d.%m.%Y')} {status_icon}\n"
                text += f"   –ü–æ–±–µ–¥–∏—Ç–µ–ª—å: {winner_info}\n\n"
        else:
            text += "–†–æ–∑—ã–≥—Ä—ã—à–∏ –µ—â—ë –Ω–µ –ø—Ä–æ–≤–æ–¥–∏–ª–∏—Å—å.\n\n"

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        builder = InlineKeyboardBuilder()
        builder.button(text="üéØ –ü—Ä–æ–≤–µ—Å—Ç–∏ —Ä–æ–∑—ã–≥—Ä—ã—à", callback_data="run_lottery")
        builder.button(
            text="üìã –í—ã–±—Ä–∞—Ç—å –ø–æ–±–µ–¥–∏—Ç–µ–ª—è –≤—Ä—É—á–Ω—É—é", callback_data="manual_select_start"
        )
        builder.button(text="üìä –ò—Å—Ç–æ—Ä–∏—è —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π", callback_data="lottery_history")
        builder.button(text="üîô –ù–∞–∑–∞–¥", callback_data="weekly_lottery")
        builder.adjust(1)

        await callback.message.edit_text(
            text, reply_markup=builder.as_markup(), parse_mode="HTML"
        )
        await callback.answer()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–æ–∑—ã–≥—Ä—ã—à–∞–º–∏: {str(e)}")
        await callback.message.edit_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–æ–∑—ã–≥—Ä—ã—à–∞–º–∏.",
            reply_markup=get_main_menu_keyboard(),
        )
        await callback.answer()


@router.callback_query(F.data == "run_lottery")
async def callback_run_lottery(callback: CallbackQuery, session: AsyncSession):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è —Ä–æ–∑—ã–≥—Ä—ã—à–∞
    """
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä
    if str(callback.from_user.id) not in ADMIN_IDS:
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è")
        return

    try:
        await callback.answer("–ü—Ä–æ–≤–æ–¥–∏–º —Ä–æ–∑—ã–≥—Ä—ã—à...")

        # –ü—Ä–æ–≤–æ–¥–∏–º —Ä–æ–∑—ã–≥—Ä—ã—à –∑–∞ –ø—Ä–µ–¥—ã–¥—É—â—É—é –Ω–µ–¥–µ–ª—é
        result = await weekly_lottery_service.conduct_lottery(session)

        if result["success"]:
            if result.get("winner"):
                w = result["winner"]
                message = f"‚úÖ –†–æ–∑—ã–≥—Ä—ã—à –ø—Ä–æ–≤–µ–¥—ë–Ω!\nüèÜ –ü–æ–±–µ–¥–∏—Ç–µ–ª—å: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å #{w['user_id']}\nüßæ –ß–µ–∫: #{w['receipt_id']}"
            else:
                message = "‚úÖ –†–æ–∑—ã–≥—Ä—ã—à –ø—Ä–æ–≤–µ–¥—ë–Ω. –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –Ω–µ –±—ã–ª–æ."
        else:
            message = f"‚ùå –û—à–∏–±–∫–∞: {result.get('error')}"

        await callback.message.edit_text(message, reply_markup=get_main_menu_keyboard())

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏–∏ —Ä–æ–∑—ã–≥—Ä—ã—à–∞: {str(e)}")
        await callback.message.edit_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏–∏ —Ä–æ–∑—ã–≥—Ä—ã—à–∞.",
            reply_markup=get_main_menu_keyboard(),
        )


@router.callback_query(F.data == "manual_select_start")
async def callback_manual_select_start(
    callback: CallbackQuery, state: FSMContext, session: AsyncSession
):
    """
    –ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Ä—É—á–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
    """
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä
    if str(callback.from_user.id) not in ADMIN_IDS:
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è")
        return

    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø—Ä–æ–≤–µ–¥—ë–Ω–Ω—ã–π —Ä–æ–∑—ã–≥—Ä—ã—à
        recent_lotteries = await weekly_lottery_service.get_lottery_history(
            session, limit=1
        )

        if not recent_lotteries:
            await callback.message.edit_text(
                "‚ùå –ù–µ—Ç –ø—Ä–æ–≤–µ–¥—ë–Ω–Ω—ã—Ö —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è.",
                reply_markup=get_main_menu_keyboard(),
            )
            return

        lottery = recent_lotteries[0]

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ä–æ–∑—ã–≥—Ä—ã—à –µ—â—ë –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω
        if lottery.notification_sent:
            await callback.message.edit_text(
                "‚ùå –≠—Ç–æ—Ç —Ä–æ–∑—ã–≥—Ä—ã—à —É–∂–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω –∏ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è –Ω–µ–ª—å–∑—è –∏–∑–º–µ–Ω–∏—Ç—å.",
                reply_markup=get_main_menu_keyboard(),
            )
            return

        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥—Ö–æ–¥—è—â–∏–µ —á–µ–∫–∏
        eligible_receipts = await weekly_lottery_service.get_eligible_receipts(
            session, lottery.week_start, lottery.week_end
        )

        if not eligible_receipts:
            await callback.message.edit_text(
                "‚ùå –ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —á–µ–∫–æ–≤ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è.",
                reply_markup=get_main_menu_keyboard(),
            )
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–æ–∑—ã–≥—Ä—ã—à–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        await state.update_data(lottery_id=lottery.id)

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ —á–µ–∫–æ–≤
        text = f"<b>üéØ –í—ã–±–æ—Ä –ø–æ–±–µ–¥–∏—Ç–µ–ª—è –≤—Ä—É—á–Ω—É—é</b>\n\n"
        text += f"–ù–µ–¥–µ–ª—è: {lottery.week_start.strftime('%d.%m')} - {lottery.week_end.strftime('%d.%m.%Y')}\n"
        text += f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {len(eligible_receipts)}\n\n"
        text += "<b>–ü–æ–¥—Ö–æ–¥—è—â–∏–µ —á–µ–∫–∏:</b>\n"

        for i, receipt in enumerate(
            eligible_receipts[:10], 1
        ):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10 —á–µ–∫–æ–≤
            user_info = (
                f"@{receipt.user.username}"
                if receipt.user.username
                else receipt.user.full_name
            )
            text += f"{i}. –ß–µ–∫ #{receipt.id} - {user_info} ({receipt.amount} —Ä—É–±.)\n"

        if len(eligible_receipts) > 10:
            text += f"... –∏ –µ—â—ë {len(eligible_receipts) - 10} —á–µ–∫–æ–≤\n"

        text += "\n<b>–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —á–µ–∫–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–º:</b>"

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–æ–º–µ—Ä–æ–≤ —á–µ–∫–æ–≤
        builder = InlineKeyboardBuilder()

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø–µ—Ä–≤—ã—Ö 10 —á–µ–∫–æ–≤
        for i, receipt in enumerate(eligible_receipts[:10], 1):
            builder.button(
                text=f"–ß–µ–∫ #{receipt.id}", callback_data=f"select_receipt:{receipt.id}"
            )

        builder.button(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_lottery_management")
        builder.adjust(2)

        await callback.message.edit_text(
            text, reply_markup=builder.as_markup(), parse_mode="HTML"
        )

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –Ω–æ–º–µ—Ä–∞ —á–µ–∫–∞
        await state.set_state(ManualSelectState.waiting_for_receipt_id)

        await callback.answer()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∞–ª–µ —Ä—É—á–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞: {str(e)}")
        await callback.message.edit_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∞–ª–µ –≤—ã–±–æ—Ä–∞ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è.",
            reply_markup=get_main_menu_keyboard(),
        )
        await callback.answer()


@router.callback_query(lambda c: c.data and c.data.startswith("select_receipt:"))
async def callback_select_receipt(
    callback: CallbackQuery, state: FSMContext, session: AsyncSession
):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —á–µ–∫–∞ –∏–∑ —Å–ø–∏—Å–∫–∞
    """
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä
    if str(callback.from_user.id) not in ADMIN_IDS:
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è")
        return

    try:
        # –ü–æ–ª—É—á–∞–µ–º ID —á–µ–∫–∞ –∏–∑ callback_data
        receipt_id = int(callback.data.split(":")[1])

        # –ü–æ–ª—É—á–∞–µ–º ID —Ä–æ–∑—ã–≥—Ä—ã—à–∞ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        data = await state.get_data()
        lottery_id = data.get("lottery_id")

        if not lottery_id:
            await callback.message.edit_text(
                "‚ùå –û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω ID —Ä–æ–∑—ã–≥—Ä—ã—à–∞.",
                reply_markup=get_main_menu_keyboard(),
            )
            await state.clear()
            return

        # –í—ã–ø–æ–ª–Ω—è–µ–º –≤—ã–±–æ—Ä –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
        result = await weekly_lottery_service.manual_select_winner(
            session, lottery_id, receipt_id
        )

        if result["success"]:
            message = f"‚úÖ {result['message']}"
        else:
            message = f"‚ùå –û—à–∏–±–∫–∞: {result['error']}"

        await callback.message.edit_text(message, reply_markup=get_main_menu_keyboard())

        await state.clear()
        await callback.answer()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —á–µ–∫–∞: {str(e)}")
        await callback.message.edit_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —á–µ–∫–∞.", reply_markup=get_main_menu_keyboard()
        )
        await state.clear()
        await callback.answer()


@router.message(ManualSelectState.waiting_for_receipt_id)
async def handle_manual_receipt_selection(
    message: Message, session: AsyncSession, state: FSMContext
):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –Ω–æ–º–µ—Ä–∞ —á–µ–∫–∞ –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
    """
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä
    if str(message.from_user.id) not in ADMIN_IDS:
        return

    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤–≤–µ–¥—ë–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
        receipt_id_text = message.text.strip()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–≤–µ–¥–µ–Ω–æ —á–∏—Å–ª–æ
        if not receipt_id_text.isdigit():
            await message.answer(
                "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —á–µ–∫–∞ (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã)."
            )
            return

        receipt_id = int(receipt_id_text)

        # –ü–æ–ª—É—á–∞–µ–º ID —Ä–æ–∑—ã–≥—Ä—ã—à–∞ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        data = await state.get_data()
        lottery_id = data.get("lottery_id")

        if not lottery_id:
            await message.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω ID —Ä–æ–∑—ã–≥—Ä—ã—à–∞.")
            await state.clear()
            return

        # –í—ã–ø–æ–ª–Ω—è–µ–º –≤—ã–±–æ—Ä –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
        result = await weekly_lottery_service.manual_select_winner(
            session, lottery_id, receipt_id
        )

        if result["success"]:
            await message.answer(f"‚úÖ {result['message']}")
        else:
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {result['error']}")

        await state.clear()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–≤–æ–¥–∞ —á–µ–∫–∞: {str(e)}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —á–µ–∫–∞.")
        await state.clear()


def register_weekly_lottery_handlers() -> Router:
    """
    –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ —Ä–æ–∑—ã–≥—Ä—ã—à–∞
    """
    return router
