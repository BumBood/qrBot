import random
from sqlalchemy import select, func, and_
from sqlalchemy.ext.asyncio import AsyncSession

from models.receipt_model import Receipt
from models.user_model import User
from logger import logger


async def select_winner(session: AsyncSession) -> int:
    """
    –í—ã–±–∏—Ä–∞–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–π –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–π —á–µ–∫ –¥–ª—è —Ä–æ–∑—ã–≥—Ä—ã—à–∞

    Args:
        session: –°–µ—Å—Å–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö

    Returns:
        int: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è-–ø–æ–±–µ–¥–∏—Ç–µ–ª—è –∏–ª–∏ None, –µ—Å–ª–∏ –Ω–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —á–µ–∫–æ–≤
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–µ —á–µ–∫–∏ —Å —Ö–æ—Ç—è –±—ã 1 –ø–æ–∑–∏—Ü–∏–µ–π –ê–π—Å–∏–¥–∞
        verified_receipts = await session.execute(
            select(Receipt).where(
                and_(
                    Receipt.status == "verified",
                    Receipt.items_count > 0,
                )
            )
        )

        receipts_list = verified_receipts.scalars().all()

        if not receipts_list:
            logger.warning("–ù–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã—Ö —á–µ–∫–æ–≤ –¥–ª—è —Ä–æ–∑—ã–≥—Ä—ã—à–∞")
            return None

        # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π —á–µ–∫
        winner_receipt = random.choice(receipts_list)

        logger.info(
            f"–í—ã–±—Ä–∞–Ω –ø–æ–±–µ–¥–∏—Ç–µ–ª—å —Ä–æ–∑—ã–≥—Ä—ã—à–∞: —á–µ–∫ {winner_receipt.id}, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {winner_receipt.user_id}"
        )

        return winner_receipt.user_id

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è —Ä–æ–∑—ã–≥—Ä—ã—à–∞: {str(e)}")
        return None


async def notify_winner(session: AsyncSession, bot, user_id: int) -> bool:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–±–µ–¥–∏—Ç–µ–ª—é —Ä–æ–∑—ã–≥—Ä—ã—à–∞

    Args:
        session: –°–µ—Å—Å–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        bot: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è-–ø–æ–±–µ–¥–∏—Ç–µ–ª—è

    Returns:
        bool: True, –µ—Å–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ, –∏–Ω–∞—á–µ False
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        user_query = await session.execute(select(User).where(User.id == user_id))
        user = user_query.scalars().first()

        if not user:
            logger.error(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–±–µ–¥–∏—Ç–µ–ª—é
        await bot.send_message(
            user_id,
            "üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã —Å—Ç–∞–ª–∏ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–º —Ä–æ–∑—ã–≥—Ä—ã—à–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –ø—Ä–∏–∑–∞! "
            "–í –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è —Å –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è –Ω–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–∏–∑–∞.",
        )

        logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–æ–±–µ–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")

        return True

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–±–µ–¥–∏—Ç–µ–ª—é: {str(e)}")
        return False


async def notify_participants(session: AsyncSession, bot, winner_id: int) -> dict:
    """
    –†–∞—Å—Å—ã–ª–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—Å–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö —Ä–æ–∑—ã–≥—Ä—ã—à–∞

    Args:
        session: –°–µ—Å—Å–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        bot: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
        winner_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è-–ø–æ–±–µ–¥–∏—Ç–µ–ª—è

    Returns:
        dict: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫—Ä–æ–º–µ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
        users_query = await session.execute(select(User).where(User.id != winner_id))
        users = users_query.scalars().all()

        sent_count = 0
        error_count = 0

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –≤—Å–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º
        for user in users:
            try:
                await bot.send_message(
                    user.id,
                    "–†–æ–∑—ã–≥—Ä—ã—à –≥–ª–∞–≤–Ω–æ–≥–æ –ø—Ä–∏–∑–∞ –∑–∞–≤–µ—Ä—à–µ–Ω! –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤ —ç—Ç–æ—Ç —Ä–∞–∑ –≤—ã –Ω–µ —Å—Ç–∞–ª–∏ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–º. "
                    "–ù–æ –Ω–µ —Ä–∞—Å—Å—Ç—Ä–∞–∏–≤–∞–π—Ç–µ—Å—å, –≤–ø–µ—Ä–µ–¥–∏ –µ—â–µ –º–Ω–æ–≥–æ —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π! "
                    "–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å —á–µ–∫–∏ –∏ —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –∞–∫—Ü–∏–∏.",
                )
                sent_count += 1
            except Exception as e:
                logger.error(
                    f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.id}: {str(e)}"
                )
                error_count += 1

        logger.info(
            f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {sent_count} —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —É—á–∞—Å—Ç–Ω–∏–∫–∞–º —Ä–æ–∑—ã–≥—Ä—ã—à–∞, –æ—à–∏–±–æ–∫: {error_count}"
        )

        return {"success": True, "sent_count": sent_count, "error_count": error_count}

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—Å—ã–ª–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —É—á–∞—Å—Ç–Ω–∏–∫–∞–º: {str(e)}")
        return {"success": False, "error": str(e)}
