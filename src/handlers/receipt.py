import os
import re
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, FSInputFile
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.utils.keyboard import InlineKeyboardBuilder
from sqlalchemy import select
from sqlalchemy.ext.asyncio import AsyncSession

from models.receipt import Receipt
from services.receipt import (
    process_receipt_photo,
    process_manual_receipt,
    verify_receipt_with_api,
)
from services.prize import issue_prize
from logger import logger
from handlers.base import get_main_menu_keyboard

# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —á–µ–∫–∞–º–∏
router = Router()


# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM
class ReceiptStates(StatesGroup):
    waiting_for_photo = State()  # –û–∂–∏–¥–∞–Ω–∏–µ —Ñ–æ—Ç–æ —á–µ–∫–∞
    waiting_for_fn = State()  # –û–∂–∏–¥–∞–Ω–∏–µ –≤–≤–æ–¥–∞ –§–ù
    waiting_for_receipt_number = State()  # –û–∂–∏–¥–∞–Ω–∏–µ –≤–≤–æ–¥–∞ –Ω–æ–º–µ—Ä–∞ —á–µ–∫–∞


# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ –º–µ—Ç–æ–¥–∞ –≤–≤–æ–¥–∞ —á–µ–∫–∞
def get_receipt_method_keyboard():
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤—ã–±–æ—Ä–∞ –º–µ—Ç–æ–¥–∞ –≤–≤–æ–¥–∞ —á–µ–∫–∞
    """
    builder = InlineKeyboardBuilder()
    builder.button(text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ —á–µ–∫–∞", callback_data="receipt_photo")
    builder.button(text="–í–≤–µ—Å—Ç–∏ –¥–∞–Ω–Ω—ã–µ –≤—Ä—É—á–Ω—É—é", callback_data="receipt_manual")
    builder.button(text="–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="main_menu")
    builder.adjust(1)  # –ü–æ –æ–¥–Ω–æ–π –∫–Ω–æ–ø–∫–µ –≤ —Ä—è–¥—É
    return builder.as_markup()


# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é
def get_back_keyboard():
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é
    """
    builder = InlineKeyboardBuilder()
    builder.button(text="–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="main_menu")
    return builder.as_markup()


@router.message(Command("register"))
async def cmd_register(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /register
    """
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —á–µ–∫–∞:", reply_markup=get_receipt_method_keyboard()
    )


@router.callback_query(F.data == "register_receipt")
async def callback_register_receipt(callback: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–æ–∫—É–ø–∫—É"
    """
    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —á–µ–∫–∞:", reply_markup=get_receipt_method_keyboard()
    )
    await callback.answer()


@router.callback_query(
    F.data == "receipt_photo"
)
async def callback_receipt_photo(callback: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –º–µ—Ç–æ–¥–∞ "–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ —á–µ–∫–∞"
    """
    await callback.message.edit_text(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é —á–µ–∫–∞. "
        "–ù–∞ —Ñ–æ—Ç–æ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–µ—Ç–∫–æ –≤–∏–¥–µ–Ω QR-–∫–æ–¥ —á–µ–∫–∞.",
        reply_markup=get_back_keyboard(),
    )
    await state.set_state(ReceiptStates.waiting_for_photo)
    await callback.answer()


@router.message(F.photo, ReceiptStates.waiting_for_photo)
async def process_photo(message: Message, state: FSMContext, session: AsyncSession):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–ª—É—á–µ–Ω–Ω–æ–µ —Ñ–æ—Ç–æ —á–µ–∫–∞ (—Å—Ü–µ–Ω–∞—Ä–∏–π –∫–∞–∫ –Ω–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–µ)
    """
    photo = message.photo[-1]
    os.makedirs("temp", exist_ok=True)
    photo_path = f"temp/{photo.file_id}.jpg"
    await message.bot.download(photo, destination=photo_path)
    user_id = message.from_user.id

    # 1. –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —á–µ–∫–∞ —Å —Ñ–æ—Ç–æ
    result = await process_receipt_photo(user_id, photo_path)
    os.remove(photo_path)

    if not result["success"]:
        await message.answer(
            f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å QR-–∫–æ–¥: {result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}\n"
            f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ QR-–∫–æ–¥ —Ö–æ—Ä–æ—à–æ –≤–∏–¥–µ–Ω –Ω–∞ —Ñ–æ—Ç–æ, –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤—Ä—É—á–Ω—É—é.",
            reply_markup=get_receipt_method_keyboard(),
        )
        await state.clear()
        return

    # 2. –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ —á–µ–∫–∞ –≤ –ë–î
    receipt_result = await process_manual_receipt(
        session,
        user_id,
        result["fn"],
        result["fd"],
        result["fpd"],
        result["amount"],
    )
    if not receipt_result["success"]:
        await message.answer(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —á–µ–∫–∞: {receipt_result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}\n"
            f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
            reply_markup=get_receipt_method_keyboard(),
        )
        await state.clear()
        return

    # 3. –ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ–≤–µ—Ä–∫–µ —á–µ—Ä–µ–∑ –§–ù–°
    wait_msg = await message.answer(
        "–ü—Ä–æ–≤–µ—Ä—è—é —á–µ–∫ —á–µ—Ä–µ–∑ API –§–ù–°... ‚è≥\n\n–ë–æ—Ç –≤—ã–ø–æ–ª–Ω—è–µ—Ç –∑–∞–ø—Ä–æ—Å"
    )

    # 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–µ–∫ —á–µ—Ä–µ–∑ API –§–ù–°
    verify_result = await verify_receipt_with_api(session, receipt_result["receipt_id"])

    if not verify_result["success"]:
        # –ß–µ–∫ –Ω–µ–≤–∞–ª–∏–¥–µ–Ω ‚Äî –æ—Ç–¥–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
        builder = InlineKeyboardBuilder()
        builder.button(text="–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="receipt_photo")
        builder.button(text="–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="main_menu")
        builder.adjust(1)
        await wait_msg.edit_text(
            "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —ç—Ç–æ—Ç —á–µ–∫ –Ω–µ –ø—Ä–æ—à—ë–ª –ø—Ä–æ–≤–µ—Ä–∫—É (–¥–∞–Ω–Ω—ã–µ –§–ù–° –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç).\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
            reply_markup=builder.as_markup(),
        )
        await state.clear()
        return

    # 5. –ß–µ–∫ –≤–∞–ª–∏–¥–µ–Ω ‚Äî –ø–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç—á—ë—Ç
    # –î–æ—Å—Ç–∞—ë–º –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è (–ø—Ä–∏–º–µ—Ä–Ω—ã–µ –ø–æ–ª—è, –∞–¥–∞–ø—Ç–∏—Ä—É–π—Ç–µ –ø–æ–¥ —Å–≤–æ—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É)
    pharmacy = verify_result.get("pharmacy", "–ê–ø—Ç–µ–∫–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞")
    address = verify_result.get("address", "–ê–¥—Ä–µ—Å –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω")
    date = verify_result.get("date", "–î–∞—Ç–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞")
    aisida_items = verify_result.get("aisida_items", [])  # —Å–ø–∏—Å–æ–∫ —Å—Ç—Ä–æ–∫
    aisida_count = len(aisida_items)
    items_str = "\n".join(f"({item})" for item in aisida_items) if aisida_items else "-"

    # –í—ã–¥–∞—ë–º –ø–æ–¥–∞—Ä–æ–∫ (–∫–∞–∫ –∏ —Ä–∞–Ω—å—à–µ)
    prize_result = await issue_prize(session, receipt_result["receipt_id"], "coupon")

    # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–¥—Ä–æ–±–Ω—ã–π —Ç–µ–∫—Å—Ç
    text = (
        f"‚úÖ –ß–µ–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω!\n"
        f"–ê–ø—Ç–µ–∫–∞: {pharmacy}, {address}\n"
        f"–î–∞—Ç–∞/–≤—Ä–µ–º—è: {date}\n\n"
        f"–í —á–µ–∫–µ –Ω–∞–π–¥–µ–Ω—ã <b>{aisida_count} –ø–æ–∑–∏—Ü–∏–∏ ¬´–ê–π—Å–∏–¥–∞¬ª</b>.\n"
        f"{items_str}\n\n"
    )
    if prize_result["success"]:
        text += (
            f"–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–∞—Ä–æ–∫:\n\nüéÅ –í–∞—à –ø–æ–¥–∞—Ä–æ–∫: –ø—Ä–æ–º–æ–∫–æ–¥ {prize_result['code']}\n"
        )
    else:
        text += (
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–¥–∞—á–µ –ø–æ–¥–∞—Ä–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.\n"
        )

    await wait_msg.edit_text(
        text, reply_markup=get_main_menu_keyboard(), parse_mode="HTML"
    )
    await state.clear()


@router.callback_query(
    F.data == "receipt_manual"
)
async def callback_receipt_manual(callback: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –º–µ—Ç–æ–¥–∞ "–í–≤–µ—Å—Ç–∏ –¥–∞–Ω–Ω—ã–µ –≤—Ä—É—á–Ω—É—é"
    """
    await callback.message.edit_text(
        "–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ —á–µ–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        "–§–ù –§–î –§–ü–î –°–£–ú–ú–ê\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: 8710000101234567 1234 5678901234 299.50",
        reply_markup=get_back_keyboard(),
    )
    await state.set_state(ReceiptStates.waiting_for_fn)
    await callback.answer()


def get_manual_entry_keyboard():
    """
    –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –æ—à–∏–±–æ–∫ —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞: –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞, –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ, –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é
    """
    builder = InlineKeyboardBuilder()
    builder.button(text="–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="receipt_manual")
    builder.button(text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ —á–µ–∫–∞", callback_data="receipt_photo")
    builder.button(text="–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="main_menu")
    builder.adjust(1)
    return builder.as_markup()


@router.message(ReceiptStates.waiting_for_fn)
async def process_manual_entry(
    message: Message, state: FSMContext, session: AsyncSession
):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–¥–Ω–æ—Å—Ç—Ä–æ—á–Ω—ã–π —Ä—É—á–Ω–æ–π –≤–≤–æ–¥ —á–µ–∫–∞
    """
    text = message.text.strip().replace(",", ".")
    parts = text.split()
    if len(parts) != 4:
        await message.answer(
            "–î–∞–Ω–Ω—ã–µ –≤–≤–µ–¥–µ–Ω—ã –Ω–µ–≤–µ—Ä–Ω–æ. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –§–ù (16 –∏–ª–∏ 17 —Ü–∏—Ñ—Ä), –§–î (4‚Äì6 —Ü–∏—Ñ—Ä), –§–ü–î (10 —Ü–∏—Ñ—Ä) –∏ —Å—É–º–º–∞ (xxx.xx), —Ä–∞–∑–¥–µ–ª—ë–Ω–Ω—ã–µ –ø—Ä–æ–±–µ–ª–æ–º.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –ø—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ —á–µ–∫–∞.",
            reply_markup=get_manual_entry_keyboard(),
        )
        await state.clear()
        return
    fn, fd, fpd, amount = parts
    if (
        not re.match(r"^\d{16,17}$", fn)
        or not re.match(r"^\d{4,6}$", fd)
        or not re.match(r"^\d{10}$", fpd)
        or not re.match(r"^\d+\.\d{2}$", amount)
    ):
        await message.answer(
            "–î–∞–Ω–Ω—ã–µ –≤–≤–µ–¥–µ–Ω—ã –Ω–µ–≤–µ—Ä–Ω–æ. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –§–ù (16 –∏–ª–∏ 17 —Ü–∏—Ñ—Ä), –§–î (4‚Äì6 —Ü–∏—Ñ—Ä), –§–ü–î (10 —Ü–∏—Ñ—Ä) –∏ —Å—É–º–º–∞ (xxx.xx), —Ä–∞–∑–¥–µ–ª—ë–Ω–Ω—ã–µ –ø—Ä–æ–±–µ–ª–æ–º.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –ø—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ —á–µ–∫–∞.",
            reply_markup=get_manual_entry_keyboard(),
        )
        return
    try:
        amount_val = float(amount)
        if amount_val <= 0:
            raise ValueError
    except Exception:
        await message.answer(
            "–î–∞–Ω–Ω—ã–µ –≤–≤–µ–¥–µ–Ω—ã –Ω–µ–≤–µ—Ä–Ω–æ. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –§–ù (16 –∏–ª–∏ 17 —Ü–∏—Ñ—Ä), –§–î (4‚Äì6 —Ü–∏—Ñ—Ä), –§–ü–î (10 —Ü–∏—Ñ—Ä) –∏ —Å—É–º–º–∞ (xxx.xx), —Ä–∞–∑–¥–µ–ª—ë–Ω–Ω—ã–µ –ø—Ä–æ–±–µ–ª–æ–º.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –ø—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ —á–µ–∫–∞.",
            reply_markup=get_manual_entry_keyboard(),
        )
        return
    user_id = message.from_user.id
    receipt_result = await process_manual_receipt(
        session, user_id, fn, fd, fpd, amount_val
    )
    if receipt_result["success"]:
        verify_result = await verify_receipt_with_api(
            session, receipt_result["receipt_id"]
        )
        if verify_result["success"]:
            prize_result = await issue_prize(
                session, receipt_result["receipt_id"], "coupon"
            )
            if prize_result["success"]:
                await message.answer(
                    f"‚úÖ –ß–µ–∫ —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–≤–µ—Ä–µ–Ω!\n\n"
                    f"–°—É–º–º–∞: {amount_val} —Ä—É–±.\n"
                    f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤ ¬´–ê–π—Å–∏–¥–∞¬ª: {verify_result['aisida_count']}\n\n"
                    f"üéÅ –í–∞—à –ø–æ–¥–∞—Ä–æ–∫: –ø—Ä–æ–º–æ–∫–æ–¥ {prize_result['code']}\n\n"
                    f"–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É!",
                    reply_markup=get_main_menu_keyboard(),
                )
            else:
                await message.answer(
                    f"‚úÖ –ß–µ–∫ —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–≤–µ—Ä–µ–Ω, –Ω–æ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–¥–∞—á–µ –ø–æ–¥–∞—Ä–∫–∞.\n"
                    f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
                    reply_markup=get_main_menu_keyboard(),
                )
        else:
            await message.answer(
                f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —á–µ–∫: {verify_result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}\n"
                f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –ø—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ —á–µ–∫–∞.",
                reply_markup=get_manual_entry_keyboard(),
            )
    else:
        await message.answer(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —á–µ–∫–∞: {receipt_result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}\n"
            f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
            reply_markup=get_manual_entry_keyboard(),
        )
    await state.clear()


@router.callback_query(F.data == "my_receipts")
async def callback_my_receipts(
    callback: CallbackQuery, session: AsyncSession, state: FSMContext
):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–ú–æ–∏ —á–µ–∫–∏"
    """
    user_id = callback.from_user.id

    # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 —á–µ–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    receipts_query = await session.execute(
        select(Receipt)
        .where(Receipt.user_id == user_id)
        .order_by(Receipt.created_at.desc())
        .limit(3)
    )
    receipts = receipts_query.scalars().all()

    builder = InlineKeyboardBuilder()
    builder.button(text="–í–≤–µ—Å—Ç–∏ –Ω–æ–º–µ—Ä", callback_data="enter_receipt_number")
    builder.button(text="–ú–µ–Ω—é", callback_data="main_menu")
    builder.adjust(1)

    if not receipts:
        await callback.message.edit_text(
            "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —á–µ–∫–æ–≤.",
            reply_markup=builder.as_markup(),
        )
        await callback.answer()
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —á–µ–∫–æ–≤
    receipts_text = "<b>–í–∞—à–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:</b>\n\n"

    for i, receipt in enumerate(receipts, 1):
        status_text = ""
        if receipt.status == "verified":
            status_text = "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω"
            if receipt.prize_code:
                status_text += f", –ø–æ–¥–∞—Ä–æ–∫: –ø—Ä–æ–º–æ–∫–æ–¥ {receipt.prize_value} ‚ÇΩ"
        elif receipt.status == "pending":
            status_text = "–û–∂–∏–¥–∞–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏"
        elif receipt.status == "declined":
            status_text = "–û—Ç–∫–ª–æ–Ω—ë–Ω"

        

        receipts_text += (
            f"{i}. ‚Ññ {receipt.id} ({receipt.created_at.strftime('%d.%m.%Y')}) ‚Äî "
            f"{status_text}\n"
        )

    receipts_text += "\n–î–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ ¬´–ú–µ–Ω—é¬ª."

    await callback.message.edit_text(
        receipts_text, reply_markup=builder.as_markup(), parse_mode="HTML"
    )
    await state.set_state(ReceiptStates.waiting_for_receipt_number)
    await callback.answer()


@router.callback_query(
    F.data == "enter_receipt_number", ReceiptStates.waiting_for_receipt_number
)
async def callback_enter_receipt_number(callback: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–í–≤–µ—Å—Ç–∏ –Ω–æ–º–µ—Ä"
    """
    await callback.message.edit_text(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —á–µ–∫–∞:",
        reply_markup=get_back_to_my_receipts_keyboard(),
    )
    await callback.answer()


def get_back_to_my_receipts_keyboard():
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ '–ú–æ–∏ —á–µ–∫–∏' –∏ '–ú–µ–Ω—é' –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞
    """
    builder = InlineKeyboardBuilder()
    builder.button(text="–ú–æ–∏ —á–µ–∫–∏", callback_data="my_receipts")
    builder.button(text="–ú–µ–Ω—é", callback_data="main_menu")
    builder.adjust(1)
    return builder.as_markup()


@router.message(ReceiptStates.waiting_for_receipt_number)
async def process_receipt_number(
    message: Message, state: FSMContext, session: AsyncSession
):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –Ω–æ–º–µ—Ä–∞ —á–µ–∫–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª–µ–π
    """
    receipt_id_str = message.text.strip()
    if not receipt_id_str.isdigit():
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.",
            reply_markup=get_back_to_my_receipts_keyboard(),
        )
        return

    receipt_id = int(receipt_id_str)
    user_id = message.from_user.id

    receipt_query = await session.execute(
        select(Receipt).where(Receipt.id == receipt_id, Receipt.user_id == user_id)
    )
    receipt = receipt_query.scalar_one_or_none()

    if not receipt:
        await message.answer(
            "‚ùå –ß–µ–∫ —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –≤–∞–º.",
            reply_markup=get_back_to_my_receipts_keyboard(),
        )
        return

    status_text = ""
    if receipt.status == "verified":
        status_text = f"–ü–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω ‚úÖ"
    elif receipt.status == "pending":
        status_text = "–û–∂–∏–¥–∞–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏"
    elif receipt.status == "declined":
        status_text = "–û—Ç–∫–ª–æ–Ω—ë–Ω"

    prize_info = ""
    if receipt.prize_code:
        prize_info = (
            f"\n‚Ä¢ –ü–æ–¥–∞—Ä–æ–∫: –ø—Ä–æ–º–æ–∫–æ–¥ {receipt.prize_value} ‚ÇΩ ({receipt.prize_code})"
        )

    receipt_details_text = (
        f"<b>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è ‚Ññ {receipt.id} ({receipt.created_at.strftime('%d.%m.%Y')}):</b>\n"
        f"‚Ä¢ –ê–ø—Ç–µ–∫–∞: {receipt.pharmacy_name if receipt.pharmacy_name else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}, —É–ª. {receipt.pharmacy_address if receipt.pharmacy_address else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}, {receipt.pharmacy_city if receipt.pharmacy_city else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}\n"
        f"‚Ä¢ –¢–æ–≤–∞—Ä: {receipt.product_name if receipt.product_name else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}\n"
        f"‚Ä¢ –°—Ç–∞—Ç—É—Å: {status_text}{prize_info}\n"
    )

    await message.answer(
        receipt_details_text,
        reply_markup=get_back_to_my_receipts_keyboard(),
        parse_mode="HTML",
    )
    await state.clear()


def register_receipt_handlers() -> Router:
    """
    –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç —Ö–µ–Ω–¥–ª–µ—Ä—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —á–µ–∫–∞–º–∏ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–æ—É—Ç–µ—Ä
    """
    return router
