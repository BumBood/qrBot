import asyncio
from datetime import datetime, timedelta
from typing import Optional
import aiohttp
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.cron import CronTrigger

from services.weekly_lottery_service import weekly_lottery_service
from services.google_sheets_service import google_sheets_service
from database import async_session
from logger import logger
from sqlalchemy import select, and_
from models.weekly_lottery_model import WeeklyLottery


class LotteryScheduler:
    """–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã—Ö —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π"""

    def __init__(self, bot=None):
        self.scheduler = AsyncIOScheduler()
        self.bot = bot
        self.is_running = False

    async def conduct_weekly_lottery_job(self):
        """–ó–∞–¥–∞—á–∞ –¥–ª—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ —Ä–æ–∑—ã–≥—Ä—ã—à–∞"""
        try:
            logger.info("–ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ —Ä–æ–∑—ã–≥—Ä—ã—à–∞")

            async with async_session() as session:
                # –ü—Ä–æ–≤–æ–¥–∏–º —Ä–æ–∑—ã–≥—Ä—ã—à –±–µ–∑ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π, –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç –≤—Ä—É—á–Ω—É—é
                result = await weekly_lottery_service.conduct_lottery(session)

                if result["success"]:
                    if result.get("winner"):
                        logger.info(
                            f"–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π —Ä–æ–∑—ã–≥—Ä—ã—à –∑–∞–≤–µ—Ä—à—ë–Ω —É—Å–ø–µ—à–Ω–æ. "
                            f"–ü–æ–±–µ–¥–∏—Ç–µ–ª—å: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {result['winner']['user_id']}, "
                            f"—É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {result['participants_count']}"
                        )
                    else:
                        logger.info(
                            f"–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π —Ä–æ–∑—ã–≥—Ä—ã—à –∑–∞–≤–µ—Ä—à—ë–Ω, –Ω–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –Ω–µ –±—ã–ª–æ"
                        )
                else:
                    logger.error(
                        f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏–∏ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ —Ä–æ–∑—ã–≥—Ä—ã—à–∞: {result.get('error')}"
                    )

        except Exception as e:
            logger.error(
                f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –∑–∞–¥–∞—á–µ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ —Ä–æ–∑—ã–≥—Ä—ã—à–∞: {str(e)}"
            )

    async def export_users_to_sheets_job(self):
        """–ó–∞–¥–∞—á–∞ –≤—ã–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ Google Sheets"""
        try:
            logger.info("–ó–∞–ø—É—Å–∫ –∑–∞–¥–∞—á–∏ —ç–∫—Å–ø–æ—Ä—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ Google Sheets")
            # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –≤—ã–≥—Ä—É–∑–∫—É –≤ –ø—É–ª–µ
            loop = asyncio.get_event_loop()
            result = await loop.run_in_executor(
                None, google_sheets_service.export_users
            )
            if result.get("success"):
                logger.info(
                    f"–≠–∫—Å–ø–æ—Ä—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞–≤–µ—Ä—à—ë–Ω, –≤—ã–≥—Ä—É–∂–µ–Ω–æ: {result.get('count')}"
                )
            else:
                logger.error(
                    f"–≠–∫—Å–ø–æ—Ä—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω: {result.get('error')}"
                )
        except Exception as e:
            logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤ Google Sheets: {str(e)}")

    async def send_contact_reminders_job(self):
        """–ó–∞–¥–∞—á–∞ –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –æ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–∏ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ–±–µ–¥–∏—Ç–µ–ª—è–º"""
        logger.info(
            "–ó–∞–ø—É—Å–∫ –∑–∞–¥–∞—á–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–∏ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ–±–µ–¥–∏—Ç–µ–ª—è–º"
        )
        try:
            async with async_session() as session:
                # –í—ã—á–∏—Å–ª—è–µ–º –¥–∞—Ç—É —Ä–æ–≤–Ω–æ –æ–¥–∏–Ω –¥–µ–Ω—å –Ω–∞–∑–∞–¥
                threshold = datetime.now() - timedelta(days=1)
                reminder_date = threshold.date()
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≥—Ä–∞–Ω–∏—Ü—ã –¥–Ω—è (00:00 ‚Äì 23:59:59)
                from datetime import time

                day_start = datetime.combine(reminder_date, time.min)
                day_end = datetime.combine(reminder_date, time.max)
                result = await session.execute(
                    select(WeeklyLottery).where(
                        and_(
                            WeeklyLottery.winner_user_id != None,
                            WeeklyLottery.notification_sent == True,
                            WeeklyLottery.contact_sent == False,
                            WeeklyLottery.conducted_at >= day_start,
                            WeeklyLottery.conducted_at <= day_end,
                        )
                    )
                )
                lotteries = result.scalars().all()
                for lottery in lotteries:
                    try:
                        message = (
                            "–ú—ã —Ç–∞–∫ –∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–∏ –≤–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã –∏ –Ω–µ –º–æ–∂–µ–º —Å–≤—è–∑–∞—Ç—å—Å—è —Å –≤–∞–º–∏ –¥–ª—è –≤—ã–¥–∞—á–∏ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ –Ω–∞ 5 000 —Ä—É–±.\n\n"
                            "üìû –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏—Ç–µ –Ω–æ–º–µ—Ä –≤–∞—à–µ–≥–æ —Ç–µ–ª–µ—Ñ–æ–Ω–∞, —á—Ç–æ–±—ã –Ω–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∑–∞–ª—Å—è —Å –≤–∞–º–∏ –¥–ª—è –≤—ã–¥–∞—á–∏ –ø—Ä–∏–∑–∞."
                        )
                        await self.bot.send_message(lottery.winner_user_id, message)
                        logger.info(
                            f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {lottery.winner_user_id}"
                        )
                    except Exception as e:
                        logger.error(
                            f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {lottery.winner_user_id}: {str(e)}"
                        )
        except Exception as e:
            logger.error(
                f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –∑–∞–¥–∞—á–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –∫–æ–Ω—Ç–∞–∫—Ç–µ: {str(e)}"
            )

    def start_scheduler(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á"""
        if self.is_running:
            logger.warning("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —É–∂–µ –∑–∞–ø—É—â–µ–Ω")
            return

        try:
            # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ —Ä–æ–∑—ã–≥—Ä—ã—à–∞ (–∫–∞–∂–¥—ã–π –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ –≤ 10:00)
            self.scheduler.add_job(
                self.conduct_weekly_lottery_job,
                trigger=CronTrigger(
                    day_of_week=0, hour=10, minute=0
                ),  # 0 = –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫
                id="weekly_lottery",
                name="–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π —Ä–æ–∑—ã–≥—Ä—ã—à —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤ OZON",
                replace_existing=True,
                max_instances=1,
            )

            # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–∏ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ–±–µ–¥–∏—Ç–µ–ª—è–º (–∫–∞–∂–¥—ã–π –≤—Ç–æ—Ä–Ω–∏–∫ –≤ 10:00)
            self.scheduler.add_job(
                self.send_contact_reminders_job,
                trigger=CronTrigger(day_of_week=1, hour=11, minute=0),  # 1 = –≤—Ç–æ—Ä–Ω–∏–∫
                id="contact_reminder",
                name="–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è–º –æ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–∏ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö",
                replace_existing=True,
                max_instances=1,
            )

            # –≠–∫—Å–ø–æ—Ä—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∫–∞–∂–¥—ã–µ 15 –º–∏–Ω—É—Ç
            self.scheduler.add_job(
                self.export_users_to_sheets_job,
                trigger=CronTrigger(minute="*/15"),
                id="export_users_to_sheets",
                name="–≠–∫—Å–ø–æ—Ä—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ Google Sheets (–∫–∞–∂–¥—ã–µ 15 –º–∏–Ω—É—Ç)",
                replace_existing=True,
                max_instances=1,
            )

            self.scheduler.start()
            self.is_running = True
            logger.info(
                "–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã—Ö —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π –∑–∞–ø—É—â–µ–Ω (–∫–∞–∂–¥—ã–π –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ –≤ 10:00)"
            )

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞: {str(e)}")

    def stop_scheduler(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á"""
        if not self.is_running:
            return

        try:
            self.scheduler.shutdown()
            self.is_running = False
            logger.info("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã—Ö —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞: {str(e)}")

    async def run_lottery_manually(self) -> dict:
        """–†—É—á–Ω–æ–π –∑–∞–ø—É—Å–∫ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ —Ä–æ–∑—ã–≥—Ä—ã—à–∞"""
        try:
            logger.info("–†—É—á–Ω–æ–π –∑–∞–ø—É—Å–∫ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ —Ä–æ–∑—ã–≥—Ä—ã—à–∞")

            async with async_session() as session:
                result = await weekly_lottery_service.conduct_lottery(session, self.bot)
                return result

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä—É—á–Ω–æ–º –∑–∞–ø—É—Å–∫–µ —Ä–æ–∑—ã–≥—Ä—ã—à–∞: {str(e)}")
            return {"success": False, "error": f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä—É—á–Ω–æ–º –∑–∞–ø—É—Å–∫–µ: {str(e)}"}

    def get_next_lottery_time(self) -> Optional[datetime]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Ä–µ–º—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ä–æ–∑—ã–≥—Ä—ã—à–∞"""
        if not self.is_running:
            return None

        try:
            job = self.scheduler.get_job("weekly_lottery")
            if job and job.next_run_time:
                return job.next_run_time
            return None

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–∏ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ä–æ–∑—ã–≥—Ä—ã—à–∞: {str(e)}")
            return None


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
lottery_scheduler = LotteryScheduler()
