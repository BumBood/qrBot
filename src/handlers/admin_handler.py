from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.utils.keyboard import InlineKeyboardBuilder
from sqlalchemy.ext.asyncio import AsyncSession
from datetime import datetime
import random

from config import ADMIN_PANEL_ENABLED
from services.prize_service import issue_prize, promo_manager
from services.weekly_lottery_service import WeeklyLotteryService
from services.lottery_service import select_winner, notify_winner, notify_participants
from models.receipt import Receipt
from models.user import User
from models.prize import Prize
from logger import logger

# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä –¥–ª—è –∞–¥–º–∏–Ω–∫–∏
router = Router()


def get_admin_keyboard():
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∞–¥–º–∏–Ω–∫–∏"""
    builder = InlineKeyboardBuilder()
    builder.button(text="üéÅ –í—ã–¥–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥", callback_data="admin_issue_promo")
    builder.button(
        text="üé≤ –ü—Ä–æ–≤–µ—Å—Ç–∏ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—É—é –ª–æ—Ç–µ—Ä–µ—é", callback_data="admin_weekly_lottery"
    )
    builder.button(
        text="üèÜ –ü—Ä–æ–≤–µ—Å—Ç–∏ –≥–ª–∞–≤–Ω—É—é –ª–æ—Ç–µ—Ä–µ—é", callback_data="admin_main_lottery"
    )
    builder.button(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats")
    builder.button(text="üìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ —á–µ–∫–∏", callback_data="admin_recent_receipts")
    builder.button(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="admin_menu")
    builder.adjust(1)
    return builder.as_markup()


@router.message(F.text.in_(["/admin", "–∞–¥–º–∏–Ω", "–ê–¥–º–∏–Ω", "–ê–î–ú–ò–ù"]))
async def admin_command(message: Message, session: AsyncSession):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /admin –¥–ª—è –≤—Ö–æ–¥–∞ –≤ –∞–¥–º–∏–Ω–∫—É
    """
    if not ADMIN_PANEL_ENABLED:
        await message.answer("–ê–¥–º–∏–Ω–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞.")
        return

    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    stats = await get_admin_stats(session)

    text = (
        "üîß <b>–í–†–ï–ú–ï–ù–ù–ê–Ø –ê–î–ú–ò–ù–ö–ê –î–õ–Ø –¢–ï–°–¢–û–í</b>\n\n"
        "üìä <b>–¢–µ–∫—É—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
        f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats['users_count']}\n"
        f"üßæ –ß–µ–∫–æ–≤: {stats['receipts_count']}\n"
        f"‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã—Ö: {stats['verified_receipts']}\n"
        f"üéÅ –ü—Ä–æ–º–æ–∫–æ–¥–æ–≤ –≤—ã–¥–∞–Ω–æ: {stats['prizes_count']}\n"
        f"üí∞ –ü—Ä–æ–º–æ–∫–æ–¥—ã 200—Ä: {stats['promo_200_count']}\n"
        f"üí∞ –ü—Ä–æ–º–æ–∫–æ–¥—ã 500—Ä: {stats['promo_500_count']}\n\n"
        "<i>–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:</i>"
    )

    await message.answer(text, reply_markup=get_admin_keyboard(), parse_mode="HTML")


@router.callback_query(F.data == "admin_menu")
async def admin_menu_callback(callback: CallbackQuery, session: AsyncSession):
    """
    –û–±–Ω–æ–≤–ª—è–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω–∫–∏
    """
    if not ADMIN_PANEL_ENABLED:
        await callback.answer("–ê–¥–º–∏–Ω–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞.")
        return

    stats = await get_admin_stats(session)

    text = (
        "üîß <b>–í–†–ï–ú–ï–ù–ù–ê–Ø –ê–î–ú–ò–ù–ö–ê –î–õ–Ø –¢–ï–°–¢–û–í</b>\n\n"
        "üìä <b>–¢–µ–∫—É—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
        f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats['users_count']}\n"
        f"üßæ –ß–µ–∫–æ–≤: {stats['receipts_count']}\n"
        f"‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã—Ö: {stats['verified_receipts']}\n"
        f"üéÅ –ü—Ä–æ–º–æ–∫–æ–¥–æ–≤ –≤—ã–¥–∞–Ω–æ: {stats['prizes_count']}\n"
        f"üí∞ –ü—Ä–æ–º–æ–∫–æ–¥—ã 200—Ä: {stats['promo_200_count']}\n"
        f"üí∞ –ü—Ä–æ–º–æ–∫–æ–¥—ã 500—Ä: {stats['promo_500_count']}\n\n"
        "<i>–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:</i>"
    )

    await callback.message.edit_text(
        text, reply_markup=get_admin_keyboard(), parse_mode="HTML"
    )
    await callback.answer()


@router.callback_query(F.data == "admin_issue_promo")
async def admin_issue_promo_callback(callback: CallbackQuery, session: AsyncSession):
    """
    –í—ã–¥–∞–µ—Ç –ø—Ä–æ–º–æ–∫–æ–¥ –∫–∞–∫ –±—É–¥—Ç–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω —á–µ–∫
    """
    if not ADMIN_PANEL_ENABLED:
        await callback.answer("–ê–¥–º–∏–Ω–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞.")
        return

    try:
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —á–µ–∫
        test_receipt = Receipt(
            user_id=callback.from_user.id,
            fn="1234567890123456",
            fd="123456",
            fpd="1234567890",
            amount=1000.0,
            status="verified",
            verification_date=datetime.now(),
            items_count=random.choice([1, 2]),  # –°–ª—É—á–∞–π–Ω–æ 1 –∏–ª–∏ 2 —Ç–æ–≤–∞—Ä–∞
        )

        session.add(test_receipt)
        await session.flush()  # –ü–æ–ª—É—á–∞–µ–º ID –±–µ–∑ –∫–æ–º–º–∏—Ç–∞

        # –í—ã–¥–∞–µ–º –ø–æ–¥–∞—Ä–æ–∫
        prize_result = await issue_prize(
            session, test_receipt.id, test_receipt.items_count
        )

        if prize_result["success"]:
            await session.commit()
            text = (
                f"‚úÖ <b>–ü—Ä–æ–º–æ–∫–æ–¥ –≤—ã–¥–∞–Ω!</b>\n\n"
                f"üí∞ –°—É–º–º–∞ —Å–∫–∏–¥–∫–∏: {prize_result['discount_amount']} —Ä—É–±.\n"
                f"üé´ –ü—Ä–æ–º–æ–∫–æ–¥: <code>{prize_result['code']}</code>\n"
                f"üßæ ID —á–µ–∫–∞: {test_receipt.id}\n"
                f"üì¶ –¢–æ–≤–∞—Ä–æ–≤ –ê–π—Å–∏–¥–∞: {test_receipt.items_count}\n\n"
                f"<i>–ü—Ä–æ–º–æ–∫–æ–¥ —Å–æ–∑–¥–∞–Ω –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.</i>"
            )
        else:
            await session.rollback()
            text = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–¥–∞—á–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞:\n{prize_result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}"

    except Exception as e:
        await session.rollback()
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –∞–¥–º–∏–Ω–∫–µ –ø—Ä–∏ –≤—ã–¥–∞—á–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞: {str(e)}")
        text = f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}"

    builder = InlineKeyboardBuilder()
    builder.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω–∫—É", callback_data="admin_menu")

    await callback.message.edit_text(
        text, reply_markup=builder.as_markup(), parse_mode="HTML"
    )
    await callback.answer()


@router.callback_query(F.data == "admin_weekly_lottery")
async def admin_weekly_lottery_callback(callback: CallbackQuery, session: AsyncSession):
    """
    –ü—Ä–æ–≤–æ–¥–∏—Ç –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—É—é –ª–æ—Ç–µ—Ä–µ—é –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ
    """
    if not ADMIN_PANEL_ENABLED:
        await callback.answer("–ê–¥–º–∏–Ω–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞.")
        return

    await callback.message.edit_text("‚è≥ –ü—Ä–æ–≤–æ–¥–∏–º –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—É—é –ª–æ—Ç–µ—Ä–µ—é...")

    try:
        # –ü—Ä–æ–≤–æ–¥–∏–º –ª–æ—Ç–µ—Ä–µ—é
        bot = callback.bot
        result = await WeeklyLotteryService.conduct_lottery(session, bot)

        if result["success"]:
            if result.get("winner"):
                winner = result["winner"]
                text = (
                    f"üéâ <b>–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–∞—è –ª–æ—Ç–µ—Ä–µ—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∞!</b>\n\n"
                    f"üèÜ –ü–æ–±–µ–¥–∏—Ç–µ–ª—å: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {winner['user_id']}\n"
                    f"üßæ –í—ã–∏–≥—Ä—ã—à–Ω—ã–π —á–µ–∫: #{winner['receipt_id']}\n"
                    f"üë• –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {result['participants_count']}\n"
                    f"üì® –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {'‚úÖ' if result['notification_sent'] else '‚ùå'}\n"
                    f"üÜî ID —Ä–æ–∑—ã–≥—Ä—ã—à–∞: {winner['lottery_id']}"
                )
            else:
                text = (
                    f"‚ÑπÔ∏è <b>–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–∞—è –ª–æ—Ç–µ—Ä–µ—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∞</b>\n\n"
                    f"üë• –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {result['participants_count']}\n"
                    f"üìù {result.get('message', '–ù–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤')}"
                )
        else:
            text = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏–∏ –ª–æ—Ç–µ—Ä–µ–∏:\n{result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}"

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –∞–¥–º–∏–Ω–∫–µ –ø—Ä–∏ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏–∏ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–π –ª–æ—Ç–µ—Ä–µ–∏: {str(e)}")
        text = f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}"

    builder = InlineKeyboardBuilder()
    builder.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω–∫—É", callback_data="admin_menu")

    await callback.message.edit_text(
        text, reply_markup=builder.as_markup(), parse_mode="HTML"
    )
    await callback.answer()


@router.callback_query(F.data == "admin_main_lottery")
async def admin_main_lottery_callback(callback: CallbackQuery, session: AsyncSession):
    """
    –ü—Ä–æ–≤–æ–¥–∏—Ç –≥–ª–∞–≤–Ω—É—é –ª–æ—Ç–µ—Ä–µ—é –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ
    """
    if not ADMIN_PANEL_ENABLED:
        await callback.answer("–ê–¥–º–∏–Ω–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞.")
        return

    await callback.message.edit_text("‚è≥ –ü—Ä–æ–≤–æ–¥–∏–º –≥–ª–∞–≤–Ω—É—é –ª–æ—Ç–µ—Ä–µ—é...")

    try:
        # –í—ã–±–∏—Ä–∞–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
        winner_user_id = await select_winner(session)

        if winner_user_id:
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
            bot = callback.bot
            winner_notified = await notify_winner(session, bot, winner_user_id)

            # –£–≤–µ–¥–æ–º–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
            participants_result = await notify_participants(
                session, bot, winner_user_id
            )

            text = (
                f"üéâ <b>–ì–ª–∞–≤–Ω–∞—è –ª–æ—Ç–µ—Ä–µ—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∞!</b>\n\n"
                f"üèÜ –ü–æ–±–µ–¥–∏—Ç–µ–ª—å: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {winner_user_id}\n"
                f"üì® –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–±–µ–¥–∏—Ç–µ–ª—é: {'‚úÖ' if winner_notified else '‚ùå'}\n"
                f"üì§ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —É—á–∞—Å—Ç–Ω–∏–∫–∞–º: {participants_result.get('sent_count', 0)}\n"
                f"‚ùå –û—à–∏–±–æ–∫ –ø—Ä–∏ —Ä–∞—Å—Å—ã–ª–∫–µ: {participants_result.get('error_count', 0)}"
            )
        else:
            text = "‚ÑπÔ∏è <b>–ì–ª–∞–≤–Ω–∞—è –ª–æ—Ç–µ—Ä–µ—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∞</b>\n\n–ù–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã—Ö —á–µ–∫–æ–≤ –¥–ª—è —Ä–æ–∑—ã–≥—Ä—ã—à–∞."

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –∞–¥–º–∏–Ω–∫–µ –ø—Ä–∏ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏–∏ –≥–ª–∞–≤–Ω–æ–π –ª–æ—Ç–µ—Ä–µ–∏: {str(e)}")
        text = f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}"

    builder = InlineKeyboardBuilder()
    builder.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω–∫—É", callback_data="admin_menu")

    await callback.message.edit_text(
        text, reply_markup=builder.as_markup(), parse_mode="HTML"
    )
    await callback.answer()


@router.callback_query(F.data == "admin_stats")
async def admin_stats_callback(callback: CallbackQuery, session: AsyncSession):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–¥—Ä–æ–±–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    """
    if not ADMIN_PANEL_ENABLED:
        await callback.answer("–ê–¥–º–∏–Ω–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞.")
        return

    try:
        stats = await get_detailed_admin_stats(session)

        text = (
            "üìä <b>–ü–û–î–†–û–ë–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê</b>\n\n"
            f"üë• <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:</b> {stats['users_count']}\n"
            f"üßæ <b>–í—Å–µ–≥–æ —á–µ–∫–æ–≤:</b> {stats['receipts_count']}\n"
            f"‚è≥ –û–∂–∏–¥–∞—é—â–∏—Ö –ø—Ä–æ–≤–µ—Ä–∫–∏: {stats['pending_receipts']}\n"
            f"‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã—Ö: {stats['verified_receipts']}\n"
            f"‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–Ω—ã—Ö: {stats['rejected_receipts']}\n\n"
            f"üéÅ <b>–ü—Ä–æ–º–æ–∫–æ–¥—ã:</b>\n"
            f"üí∞ –í—Å–µ–≥–æ –≤—ã–¥–∞–Ω–æ: {stats['prizes_count']}\n"
            f"üíé –ü—Ä–æ–º–æ–∫–æ–¥—ã 200—Ä: {stats['promo_200_count']}\n"
            f"üíé –ü—Ä–æ–º–æ–∫–æ–¥—ã 500—Ä: {stats['promo_500_count']}\n"
            f"‚úÖ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö: {stats['used_prizes']}\n\n"
            f"üíµ <b>–°—É–º–º—ã —á–µ–∫–æ–≤:</b>\n"
            f"üìà –û–±—â–∞—è —Å—É–º–º–∞: {stats['total_amount']:.2f} —Ä—É–±.\n"
            f"üìä –°—Ä–µ–¥–Ω—è—è —Å—É–º–º–∞: {stats['avg_amount']:.2f} —Ä—É–±.\n\n"
            f"üì¶ <b>–¢–æ–≤–∞—Ä—ã –ê–π—Å–∏–¥–∞:</b>\n"
            f"üî¢ –í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤: {stats['total_aisida_items']}\n"
            f"üìä –°—Ä–µ–¥–Ω–µ–µ –Ω–∞ —á–µ–∫: {stats['avg_aisida_items']:.1f}"
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {str(e)}")
        text = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {str(e)}"

    builder = InlineKeyboardBuilder()
    builder.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω–∫—É", callback_data="admin_menu")

    await callback.message.edit_text(
        text, reply_markup=builder.as_markup(), parse_mode="HTML"
    )
    await callback.answer()


@router.callback_query(F.data == "admin_recent_receipts")
async def admin_recent_receipts_callback(
    callback: CallbackQuery, session: AsyncSession
):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ —á–µ–∫–∏
    """
    if not ADMIN_PANEL_ENABLED:
        await callback.answer("–ê–¥–º–∏–Ω–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞.")
        return

    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 —á–µ–∫–æ–≤
        from sqlalchemy import select, desc

        recent_receipts = await session.execute(
            select(Receipt).order_by(desc(Receipt.created_at)).limit(10)
        )
        receipts = recent_receipts.scalars().all()

        if not receipts:
            text = "üìã <b>–ü–û–°–õ–ï–î–ù–ò–ï –ß–ï–ö–ò</b>\n\n–ß–µ–∫–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç."
        else:
            text = "üìã <b>–ü–û–°–õ–ï–î–ù–ò–ï 10 –ß–ï–ö–û–í</b>\n\n"

            for i, receipt in enumerate(receipts, 1):
                status_emoji = {
                    "pending": "‚è≥",
                    "verified": "‚úÖ",
                    "rejected": "‚ùå",
                }.get(receipt.status, "‚ùì")

                text += (
                    f"{i}. {status_emoji} ID: {receipt.id}\n"
                    f"   üë§ User: {receipt.user_id}\n"
                    f"   üí∞ {receipt.amount} —Ä—É–±.\n"
                    f"   üì¶ –ê–π—Å–∏–¥–∞: {receipt.items_count or 0}\n"
                    f"   üìÖ {receipt.created_at.strftime('%d.%m %H:%M')}\n\n"
                )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —á–µ–∫–æ–≤: {str(e)}")
        text = f"‚ùå –û—à–∏–±–∫–∞: {str(e)}"

    builder = InlineKeyboardBuilder()
    builder.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω–∫—É", callback_data="admin_menu")

    await callback.message.edit_text(
        text, reply_markup=builder.as_markup(), parse_mode="HTML"
    )
    await callback.answer()


async def get_admin_stats(session: AsyncSession) -> dict:
    """–ü–æ–ª—É—á–∞–µ—Ç –±–∞–∑–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –∞–¥–º–∏–Ω–∫–∏"""
    try:
        from sqlalchemy import select, func

        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        users_count = await session.execute(select(func.count(User.id)))
        users_count = users_count.scalar() or 0

        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–µ–∫–æ–≤
        receipts_count = await session.execute(select(func.count(Receipt.id)))
        receipts_count = receipts_count.scalar() or 0

        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–µ —á–µ–∫–∏
        verified_receipts = await session.execute(
            select(func.count(Receipt.id)).where(Receipt.status == "verified")
        )
        verified_receipts = verified_receipts.scalar() or 0

        # –í—ã–¥–∞–Ω–Ω—ã–µ –ø—Ä–∏–∑—ã
        prizes_count = await session.execute(select(func.count(Prize.id)))
        prizes_count = prizes_count.scalar() or 0

        # –ü—Ä–æ–º–æ–∫–æ–¥—ã 200—Ä
        promo_200_count = await session.execute(
            select(func.count(Prize.id)).where(Prize.discount_amount == 200)
        )
        promo_200_count = promo_200_count.scalar() or 0

        # –ü—Ä–æ–º–æ–∫–æ–¥—ã 500—Ä
        promo_500_count = await session.execute(
            select(func.count(Prize.id)).where(Prize.discount_amount == 500)
        )
        promo_500_count = promo_500_count.scalar() or 0

        return {
            "users_count": users_count,
            "receipts_count": receipts_count,
            "verified_receipts": verified_receipts,
            "prizes_count": prizes_count,
            "promo_200_count": promo_200_count,
            "promo_500_count": promo_500_count,
        }

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {str(e)}")
        return {
            "users_count": 0,
            "receipts_count": 0,
            "verified_receipts": 0,
            "prizes_count": 0,
            "promo_200_count": 0,
            "promo_500_count": 0,
        }


async def get_detailed_admin_stats(session: AsyncSession) -> dict:
    """–ü–æ–ª—É—á–∞–µ—Ç –ø–æ–¥—Ä–æ–±–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –∞–¥–º–∏–Ω–∫–∏"""
    try:
        from sqlalchemy import select, func

        # –ë–∞–∑–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        basic_stats = await get_admin_stats(session)

        # –ß–µ–∫–∏ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
        pending_receipts = await session.execute(
            select(func.count(Receipt.id)).where(Receipt.status == "pending")
        )
        pending_receipts = pending_receipts.scalar() or 0

        rejected_receipts = await session.execute(
            select(func.count(Receipt.id)).where(Receipt.status == "rejected")
        )
        rejected_receipts = rejected_receipts.scalar() or 0

        # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ –ø—Ä–∏–∑—ã
        used_prizes = await session.execute(
            select(func.count(Prize.id)).where(Prize.used == True)
        )
        used_prizes = used_prizes.scalar() or 0

        # –°—É–º–º—ã —á–µ–∫–æ–≤
        total_amount = await session.execute(select(func.sum(Receipt.amount)))
        total_amount = total_amount.scalar() or 0

        avg_amount = await session.execute(select(func.avg(Receipt.amount)))
        avg_amount = avg_amount.scalar() or 0

        # –¢–æ–≤–∞—Ä—ã –ê–π—Å–∏–¥–∞
        total_aisida_items = await session.execute(
            select(func.sum(Receipt.items_count)).where(Receipt.items_count.isnot(None))
        )
        total_aisida_items = total_aisida_items.scalar() or 0

        avg_aisida_items = await session.execute(
            select(func.avg(Receipt.items_count)).where(Receipt.items_count.isnot(None))
        )
        avg_aisida_items = avg_aisida_items.scalar() or 0

        return {
            **basic_stats,
            "pending_receipts": pending_receipts,
            "rejected_receipts": rejected_receipts,
            "used_prizes": used_prizes,
            "total_amount": total_amount,
            "avg_amount": avg_amount,
            "total_aisida_items": total_aisida_items,
            "avg_aisida_items": avg_aisida_items,
        }

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–¥—Ä–æ–±–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {str(e)}")
        return await get_admin_stats(session)


def register_admin_handlers():
    """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç —Ö–µ–Ω–¥–ª–µ—Ä—ã –∞–¥–º–∏–Ω–∫–∏"""
    return router
